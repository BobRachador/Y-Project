{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { firebase } from '..';\nexport function getAuth(app) {\n  if (app) {\n    return firebase.app(app.name).auth();\n  }\n  return firebase.app().auth();\n}\nexport function initializeAuth(app, deps) {\n  if (app) {\n    return firebase.app(app.name).auth();\n  }\n  return firebase.app().auth();\n}\nexport function applyActionCode(_x, _x2) {\n  return _applyActionCode.apply(this, arguments);\n}\nfunction _applyActionCode() {\n  _applyActionCode = _asyncToGenerator(function* (auth, oobCode) {\n    return auth.applyActionCode(oobCode);\n  });\n  return _applyActionCode.apply(this, arguments);\n}\nexport function beforeAuthStateChanged(auth, callback, onAbort) {\n  throw new Error('beforeAuthStateChanged is unsupported by the native Firebase SDKs');\n}\nexport function checkActionCode(_x3, _x4) {\n  return _checkActionCode.apply(this, arguments);\n}\nfunction _checkActionCode() {\n  _checkActionCode = _asyncToGenerator(function* (auth, oobCode) {\n    return auth.checkActionCode(oobCode);\n  });\n  return _checkActionCode.apply(this, arguments);\n}\nexport function confirmPasswordReset(_x5, _x6, _x7) {\n  return _confirmPasswordReset.apply(this, arguments);\n}\nfunction _confirmPasswordReset() {\n  _confirmPasswordReset = _asyncToGenerator(function* (auth, oobCode, newPassword) {\n    return auth.confirmPasswordReset(oobCode, newPassword);\n  });\n  return _confirmPasswordReset.apply(this, arguments);\n}\nexport function connectAuthEmulator(auth, url, options) {\n  auth.useEmulator(url, options);\n}\nexport function createUserWithEmailAndPassword(_x8, _x9, _x10) {\n  return _createUserWithEmailAndPassword.apply(this, arguments);\n}\nfunction _createUserWithEmailAndPassword() {\n  _createUserWithEmailAndPassword = _asyncToGenerator(function* (auth, email, password) {\n    return auth.createUserWithEmailAndPassword(email, password);\n  });\n  return _createUserWithEmailAndPassword.apply(this, arguments);\n}\nexport function fetchSignInMethodsForEmail(_x11, _x12) {\n  return _fetchSignInMethodsForEmail.apply(this, arguments);\n}\nfunction _fetchSignInMethodsForEmail() {\n  _fetchSignInMethodsForEmail = _asyncToGenerator(function* (auth, email) {\n    return auth.fetchSignInMethodsForEmail(email);\n  });\n  return _fetchSignInMethodsForEmail.apply(this, arguments);\n}\nexport function getMultiFactorResolver(auth, error) {\n  return auth.getMultiFactorResolver(error);\n}\nexport function getRedirectResult(_x13, _x14) {\n  return _getRedirectResult.apply(this, arguments);\n}\nfunction _getRedirectResult() {\n  _getRedirectResult = _asyncToGenerator(function* (auth, resolver) {\n    throw new Error('getRedirectResult is unsupported by the native Firebase SDKs');\n  });\n  return _getRedirectResult.apply(this, arguments);\n}\nexport function isSignInWithEmailLink(auth, emailLink) {\n  return auth.isSignInWithEmailLink(emailLink);\n}\nexport function onAuthStateChanged(auth, nextOrObserver) {\n  return auth.onAuthStateChanged(nextOrObserver);\n}\nexport function onIdTokenChanged(auth, nextOrObserver) {\n  return auth.onIdTokenChanged(nextOrObserver);\n}\nexport function sendPasswordResetEmail(_x15, _x16, _x17) {\n  return _sendPasswordResetEmail.apply(this, arguments);\n}\nfunction _sendPasswordResetEmail() {\n  _sendPasswordResetEmail = _asyncToGenerator(function* (auth, email, actionCodeSettings) {\n    return auth.sendPasswordResetEmail(email, actionCodeSettings);\n  });\n  return _sendPasswordResetEmail.apply(this, arguments);\n}\nexport function sendSignInLinkToEmail(_x18, _x19, _x20) {\n  return _sendSignInLinkToEmail.apply(this, arguments);\n}\nfunction _sendSignInLinkToEmail() {\n  _sendSignInLinkToEmail = _asyncToGenerator(function* (auth, email, actionCodeSettings) {\n    return auth.sendSignInLinkToEmail(email, actionCodeSettings);\n  });\n  return _sendSignInLinkToEmail.apply(this, arguments);\n}\nexport function setPersistence(_x21, _x22) {\n  return _setPersistence.apply(this, arguments);\n}\nfunction _setPersistence() {\n  _setPersistence = _asyncToGenerator(function* (auth, persistence) {\n    throw new Error('setPersistence is unsupported by the native Firebase SDKs');\n  });\n  return _setPersistence.apply(this, arguments);\n}\nexport function signInAnonymously(_x23) {\n  return _signInAnonymously.apply(this, arguments);\n}\nfunction _signInAnonymously() {\n  _signInAnonymously = _asyncToGenerator(function* (auth) {\n    return auth.signInAnonymously();\n  });\n  return _signInAnonymously.apply(this, arguments);\n}\nexport function signInWithCredential(_x24, _x25) {\n  return _signInWithCredential.apply(this, arguments);\n}\nfunction _signInWithCredential() {\n  _signInWithCredential = _asyncToGenerator(function* (auth, credential) {\n    return auth.signInWithCredential(credential);\n  });\n  return _signInWithCredential.apply(this, arguments);\n}\nexport function signInWithCustomToken(_x26, _x27) {\n  return _signInWithCustomToken.apply(this, arguments);\n}\nfunction _signInWithCustomToken() {\n  _signInWithCustomToken = _asyncToGenerator(function* (auth, customToken) {\n    return auth.signInWithCustomToken(customToken);\n  });\n  return _signInWithCustomToken.apply(this, arguments);\n}\nexport function signInWithEmailAndPassword(_x28, _x29, _x30) {\n  return _signInWithEmailAndPassword.apply(this, arguments);\n}\nfunction _signInWithEmailAndPassword() {\n  _signInWithEmailAndPassword = _asyncToGenerator(function* (auth, email, password) {\n    return auth.signInWithEmailAndPassword(email, password);\n  });\n  return _signInWithEmailAndPassword.apply(this, arguments);\n}\nexport function signInWithEmailLink(_x31, _x32, _x33) {\n  return _signInWithEmailLink.apply(this, arguments);\n}\nfunction _signInWithEmailLink() {\n  _signInWithEmailLink = _asyncToGenerator(function* (auth, email, emailLink) {\n    return auth.signInWithEmailLink(email, emailLink);\n  });\n  return _signInWithEmailLink.apply(this, arguments);\n}\nexport function signInWithPhoneNumber(_x34, _x35, _x36) {\n  return _signInWithPhoneNumber.apply(this, arguments);\n}\nfunction _signInWithPhoneNumber() {\n  _signInWithPhoneNumber = _asyncToGenerator(function* (auth, phoneNumber, appVerifier) {\n    return auth.signInWithPhoneNumber(phoneNumber, appVerifier);\n  });\n  return _signInWithPhoneNumber.apply(this, arguments);\n}\nexport function verifyPhoneNumber(auth, phoneNumber, autoVerifyTimeoutOrForceResend, forceResend) {\n  return auth.verifyPhoneNumber(phoneNumber, autoVerifyTimeoutOrForceResend, forceResend);\n}\nexport function signInWithPopup(_x37, _x38, _x39) {\n  return _signInWithPopup.apply(this, arguments);\n}\nfunction _signInWithPopup() {\n  _signInWithPopup = _asyncToGenerator(function* (auth, provider, resolver) {\n    return auth.signInWithPopup(provider, resolver);\n  });\n  return _signInWithPopup.apply(this, arguments);\n}\nexport function signInWithRedirect(_x40, _x41, _x42) {\n  return _signInWithRedirect.apply(this, arguments);\n}\nfunction _signInWithRedirect() {\n  _signInWithRedirect = _asyncToGenerator(function* (auth, provider, resolver) {\n    return auth.signInWithRedirect(provider, resolver);\n  });\n  return _signInWithRedirect.apply(this, arguments);\n}\nexport function signOut(_x43) {\n  return _signOut.apply(this, arguments);\n}\nfunction _signOut() {\n  _signOut = _asyncToGenerator(function* (auth) {\n    return auth.signOut();\n  });\n  return _signOut.apply(this, arguments);\n}\nexport function updateCurrentUser(_x44, _x45) {\n  return _updateCurrentUser.apply(this, arguments);\n}\nfunction _updateCurrentUser() {\n  _updateCurrentUser = _asyncToGenerator(function* (auth, user) {\n    throw new Error('updateCurrentUser is unsupported by the native Firebase SDKs');\n  });\n  return _updateCurrentUser.apply(this, arguments);\n}\nexport function useDeviceLanguage(auth) {\n  throw new Error('useDeviceLanguage is unsupported by the native Firebase SDKs');\n}\nexport function useUserAccessGroup(auth, userAccessGroup) {\n  return auth.useUserAccessGroup(userAccessGroup);\n}\nexport function verifyPasswordResetCode(_x46, _x47) {\n  return _verifyPasswordResetCode.apply(this, arguments);\n}\nfunction _verifyPasswordResetCode() {\n  _verifyPasswordResetCode = _asyncToGenerator(function* (auth, code) {\n    return auth.verifyPasswordResetCode(code);\n  });\n  return _verifyPasswordResetCode.apply(this, arguments);\n}\nexport function parseActionCodeURL(link) {\n  throw new Error('parseActionCodeURL is unsupported by the native Firebase SDKs');\n}\nexport function deleteUser(_x48) {\n  return _deleteUser.apply(this, arguments);\n}\nfunction _deleteUser() {\n  _deleteUser = _asyncToGenerator(function* (user) {\n    return user.delete();\n  });\n  return _deleteUser.apply(this, arguments);\n}\nexport function getIdToken(_x49, _x50) {\n  return _getIdToken.apply(this, arguments);\n}\nfunction _getIdToken() {\n  _getIdToken = _asyncToGenerator(function* (user, forceRefresh) {\n    return user.getIdToken(forceRefresh);\n  });\n  return _getIdToken.apply(this, arguments);\n}\nexport function getIdTokenResult(_x51, _x52) {\n  return _getIdTokenResult.apply(this, arguments);\n}\nfunction _getIdTokenResult() {\n  _getIdTokenResult = _asyncToGenerator(function* (user, forceRefresh) {\n    return user.getIdTokenResult(forceRefresh);\n  });\n  return _getIdTokenResult.apply(this, arguments);\n}\nexport function linkWithCredential(_x53, _x54) {\n  return _linkWithCredential.apply(this, arguments);\n}\nfunction _linkWithCredential() {\n  _linkWithCredential = _asyncToGenerator(function* (user, credential) {\n    return user.linkWithCredential(credential);\n  });\n  return _linkWithCredential.apply(this, arguments);\n}\nexport function linkWithPhoneNumber(_x55, _x56, _x57) {\n  return _linkWithPhoneNumber.apply(this, arguments);\n}\nfunction _linkWithPhoneNumber() {\n  _linkWithPhoneNumber = _asyncToGenerator(function* (user, phoneNumber, appVerifier) {\n    throw new Error('linkWithPhoneNumber is unsupported by the native Firebase SDKs');\n  });\n  return _linkWithPhoneNumber.apply(this, arguments);\n}\nexport function linkWithPopup(_x58, _x59, _x60) {\n  return _linkWithPopup.apply(this, arguments);\n}\nfunction _linkWithPopup() {\n  _linkWithPopup = _asyncToGenerator(function* (user, provider, resolver) {\n    return user.linkWithPopup(provider, resolver);\n  });\n  return _linkWithPopup.apply(this, arguments);\n}\nexport function linkWithRedirect(_x61, _x62, _x63) {\n  return _linkWithRedirect.apply(this, arguments);\n}\nfunction _linkWithRedirect() {\n  _linkWithRedirect = _asyncToGenerator(function* (user, provider, resolver) {\n    return user.linkWithRedirect(provider, resolver);\n  });\n  return _linkWithRedirect.apply(this, arguments);\n}\nexport function multiFactor(user) {\n  return user._auth.multiFactor(user);\n}\nexport function reauthenticateWithCredential(_x64, _x65) {\n  return _reauthenticateWithCredential.apply(this, arguments);\n}\nfunction _reauthenticateWithCredential() {\n  _reauthenticateWithCredential = _asyncToGenerator(function* (user, credential) {\n    return user.reauthenticateWithCredential(credential);\n  });\n  return _reauthenticateWithCredential.apply(this, arguments);\n}\nexport function reauthenticateWithPhoneNumber(_x66, _x67, _x68) {\n  return _reauthenticateWithPhoneNumber.apply(this, arguments);\n}\nfunction _reauthenticateWithPhoneNumber() {\n  _reauthenticateWithPhoneNumber = _asyncToGenerator(function* (user, phoneNumber, appVerifier) {\n    throw new Error('reauthenticateWithPhoneNumber is unsupported by the native Firebase SDKs');\n  });\n  return _reauthenticateWithPhoneNumber.apply(this, arguments);\n}\nexport function reauthenticateWithPopup(_x69, _x70, _x71) {\n  return _reauthenticateWithPopup.apply(this, arguments);\n}\nfunction _reauthenticateWithPopup() {\n  _reauthenticateWithPopup = _asyncToGenerator(function* (user, provider, resolver) {\n    return user.reauthenticateWithPopup(provider, resolver);\n  });\n  return _reauthenticateWithPopup.apply(this, arguments);\n}\nexport function reauthenticateWithRedirect(_x72, _x73, _x74) {\n  return _reauthenticateWithRedirect.apply(this, arguments);\n}\nfunction _reauthenticateWithRedirect() {\n  _reauthenticateWithRedirect = _asyncToGenerator(function* (user, provider, resolver) {\n    return user.reauthenticateWithRedirect(provider, resolver);\n  });\n  return _reauthenticateWithRedirect.apply(this, arguments);\n}\nexport function reload(_x75) {\n  return _reload.apply(this, arguments);\n}\nfunction _reload() {\n  _reload = _asyncToGenerator(function* (user) {\n    return user.reload();\n  });\n  return _reload.apply(this, arguments);\n}\nexport function sendEmailVerification(_x76, _x77) {\n  return _sendEmailVerification.apply(this, arguments);\n}\nfunction _sendEmailVerification() {\n  _sendEmailVerification = _asyncToGenerator(function* (user, actionCodeSettings) {\n    return user.sendEmailVerification(actionCodeSettings);\n  });\n  return _sendEmailVerification.apply(this, arguments);\n}\nexport function unlink(_x78, _x79) {\n  return _unlink.apply(this, arguments);\n}\nfunction _unlink() {\n  _unlink = _asyncToGenerator(function* (user, providerId) {\n    return user.unlink(providerId);\n  });\n  return _unlink.apply(this, arguments);\n}\nexport function updateEmail(_x80, _x81) {\n  return _updateEmail.apply(this, arguments);\n}\nfunction _updateEmail() {\n  _updateEmail = _asyncToGenerator(function* (user, newEmail) {\n    return user.updateEmail(newEmail);\n  });\n  return _updateEmail.apply(this, arguments);\n}\nexport function updatePassword(_x82, _x83) {\n  return _updatePassword.apply(this, arguments);\n}\nfunction _updatePassword() {\n  _updatePassword = _asyncToGenerator(function* (user, newPassword) {\n    return user.updatePassword(newPassword);\n  });\n  return _updatePassword.apply(this, arguments);\n}\nexport function updatePhoneNumber(_x84, _x85) {\n  return _updatePhoneNumber.apply(this, arguments);\n}\nfunction _updatePhoneNumber() {\n  _updatePhoneNumber = _asyncToGenerator(function* (user, credential) {\n    return user.updatePhoneNumber(credential);\n  });\n  return _updatePhoneNumber.apply(this, arguments);\n}\nexport function updateProfile(_x86, _x87) {\n  return _updateProfile.apply(this, arguments);\n}\nfunction _updateProfile() {\n  _updateProfile = _asyncToGenerator(function* (user, _ref) {\n    var displayName = _ref.displayName,\n      photoUrl = _ref.photoURL;\n    return user.updateProfile({\n      displayName: displayName,\n      photoURL: photoUrl\n    });\n  });\n  return _updateProfile.apply(this, arguments);\n}\nexport function verifyBeforeUpdateEmail(_x88, _x89, _x90) {\n  return _verifyBeforeUpdateEmail.apply(this, arguments);\n}\nfunction _verifyBeforeUpdateEmail() {\n  _verifyBeforeUpdateEmail = _asyncToGenerator(function* (user, newEmail, actionCodeSettings) {\n    return user.verifyBeforeUpdateEmail(newEmail, actionCodeSettings);\n  });\n  return _verifyBeforeUpdateEmail.apply(this, arguments);\n}\nexport function getAdditionalUserInfo(userCredential) {\n  return userCredential.additionalUserInfo;\n}\nexport function getCustomAuthDomain(auth) {\n  return auth.getCustomAuthDomain();\n}","map":{"version":3,"names":["firebase","getAuth","app","name","auth","initializeAuth","deps","applyActionCode","_x","_x2","_applyActionCode","apply","arguments","_asyncToGenerator","oobCode","beforeAuthStateChanged","callback","onAbort","Error","checkActionCode","_x3","_x4","_checkActionCode","confirmPasswordReset","_x5","_x6","_x7","_confirmPasswordReset","newPassword","connectAuthEmulator","url","options","useEmulator","createUserWithEmailAndPassword","_x8","_x9","_x10","_createUserWithEmailAndPassword","email","password","fetchSignInMethodsForEmail","_x11","_x12","_fetchSignInMethodsForEmail","getMultiFactorResolver","error","getRedirectResult","_x13","_x14","_getRedirectResult","resolver","isSignInWithEmailLink","emailLink","onAuthStateChanged","nextOrObserver","onIdTokenChanged","sendPasswordResetEmail","_x15","_x16","_x17","_sendPasswordResetEmail","actionCodeSettings","sendSignInLinkToEmail","_x18","_x19","_x20","_sendSignInLinkToEmail","setPersistence","_x21","_x22","_setPersistence","persistence","signInAnonymously","_x23","_signInAnonymously","signInWithCredential","_x24","_x25","_signInWithCredential","credential","signInWithCustomToken","_x26","_x27","_signInWithCustomToken","customToken","signInWithEmailAndPassword","_x28","_x29","_x30","_signInWithEmailAndPassword","signInWithEmailLink","_x31","_x32","_x33","_signInWithEmailLink","signInWithPhoneNumber","_x34","_x35","_x36","_signInWithPhoneNumber","phoneNumber","appVerifier","verifyPhoneNumber","autoVerifyTimeoutOrForceResend","forceResend","signInWithPopup","_x37","_x38","_x39","_signInWithPopup","provider","signInWithRedirect","_x40","_x41","_x42","_signInWithRedirect","signOut","_x43","_signOut","updateCurrentUser","_x44","_x45","_updateCurrentUser","user","useDeviceLanguage","useUserAccessGroup","userAccessGroup","verifyPasswordResetCode","_x46","_x47","_verifyPasswordResetCode","code","parseActionCodeURL","link","deleteUser","_x48","_deleteUser","delete","getIdToken","_x49","_x50","_getIdToken","forceRefresh","getIdTokenResult","_x51","_x52","_getIdTokenResult","linkWithCredential","_x53","_x54","_linkWithCredential","linkWithPhoneNumber","_x55","_x56","_x57","_linkWithPhoneNumber","linkWithPopup","_x58","_x59","_x60","_linkWithPopup","linkWithRedirect","_x61","_x62","_x63","_linkWithRedirect","multiFactor","_auth","reauthenticateWithCredential","_x64","_x65","_reauthenticateWithCredential","reauthenticateWithPhoneNumber","_x66","_x67","_x68","_reauthenticateWithPhoneNumber","reauthenticateWithPopup","_x69","_x70","_x71","_reauthenticateWithPopup","reauthenticateWithRedirect","_x72","_x73","_x74","_reauthenticateWithRedirect","reload","_x75","_reload","sendEmailVerification","_x76","_x77","_sendEmailVerification","unlink","_x78","_x79","_unlink","providerId","updateEmail","_x80","_x81","_updateEmail","newEmail","updatePassword","_x82","_x83","_updatePassword","updatePhoneNumber","_x84","_x85","_updatePhoneNumber","updateProfile","_x86","_x87","_updateProfile","_ref","displayName","photoUrl","photoURL","verifyBeforeUpdateEmail","_x88","_x89","_x90","_verifyBeforeUpdateEmail","getAdditionalUserInfo","userCredential","additionalUserInfo","getCustomAuthDomain"],"sources":["C:/Users/richard.5935/Downloads/Yzon/node_modules/@react-native-firebase/auth/lib/modular/index.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { firebase } from '..';\n\n/**\n * @typedef {import('@firebase/app-types').FirebaseApp} FirebaseApp\n * @typedef {import('..').FirebaseAuthTypes} FirebaseAuthTypes\n * @typedef {import('..').FirebaseAuthTypes.Module} Auth\n * @typedef {import('..').FirebaseAuthTypes.CallbackOrObserver} CallbackOrObserver\n * @typedef {import('..').FirebaseAuthTypes.AuthListenerCallback} AuthListenerCallback\n * @typedef {import('..').FirebaseAuthTypes.ActionCodeInfo} ActionCodeInfo\n * @typedef {import('..').FirebaseAuthTypes.UserCredential} UserCredential\n * @typedef {import('..').FirebaseAuthTypes.MultiFactorError} MultiFactorError\n * @typedef {import('..').FirebaseAuthTypes.MultiFactorUser} MultiFactorUser\n * @typedef {import('..').FirebaseAuthTypes.MultiFactorResolver} MultiFactorResolver\n * @typedef {import('..').FirebaseAuthTypes.ConfirmationResult} ConfirmationResult\n * @typedef {import('..').FirebaseAuthTypes.AuthCredential} AuthCredential\n * @typedef {import('..').FirebaseAuthTypes.AuthProvider} AuthProvider\n * @typedef {import('..').FirebaseAuthTypes.PhoneAuthListener} PhoneAuthListener\n * @typedef {import('..').FirebaseAuthTypes.ActionCodeSettings} ActionCodeSettings\n * @typedef {import('..').FirebaseAuthTypes.User} User\n * @typedef {import('..').FirebaseAuthTypes.IdTokenResult} IdTokenResult\n * @typedef {import('..').FirebaseAuthTypes.AdditionalUserInfo} AdditionalUserInfo\n * @typedef {import('..').FirebaseAuthTypes.ActionCodeURL} ActionCodeURL\n * @typedef {import('..').FirebaseAuthTypes.ApplicationVerifier} ApplicationVerifier\n */\n\n/**\n * Returns the Auth instance associated with the provided FirebaseApp.\n * @param {FirebaseApp} [app] - The Firebase app instance.\n * @returns {Auth}\n */\nexport function getAuth(app) {\n  if (app) {\n    return firebase.app(app.name).auth();\n  }\n  return firebase.app().auth();\n}\n\n/**\n * This function allows more control over the Auth instance than getAuth().\n * @param {FirebaseApp} app - The Firebase app instance.\n * @param {any} [deps] - Optional. Dependencies for the Auth instance.\n * @returns {Auth}\n */\nexport function initializeAuth(app, deps) {\n  if (app) {\n    return firebase.app(app.name).auth();\n  }\n  return firebase.app().auth();\n}\n\n/**\n * Applies a verification code sent to the user by email or other out-of-band mechanism.\n * @param {Auth} auth - The Auth instance.\n * @param {string} oobCode - The out-of-band code sent to the user.\n * @returns {Promise<void>}\n */\nexport async function applyActionCode(auth, oobCode) {\n  return auth.applyActionCode(oobCode);\n}\n\n/**\n * Adds a blocking callback that runs before an auth state change sets a new user.\n * @param {Auth} auth - The Auth instance.\n * @param {(user: User | null) => void} callback - A callback function to run before the auth state changes.\n * @param {() => void} [onAbort] - Optional. A callback function to run if the operation is aborted.\n */\nexport function beforeAuthStateChanged(auth, callback, onAbort) {\n  throw new Error('beforeAuthStateChanged is unsupported by the native Firebase SDKs');\n}\n\n/**\n * Checks a verification code sent to the user by email or other out-of-band mechanism.\n * @param {Auth} auth - The Auth instance.\n * @param {string} oobCode - The out-of-band code sent to the user.\n * @returns {Promise<ActionCodeInfo>}\n */\nexport async function checkActionCode(auth, oobCode) {\n  return auth.checkActionCode(oobCode);\n}\n\n/**\n * Completes the password reset process, given a confirmation code and new password.\n * @param {Auth} auth - The Auth instance.\n * @param {string} oobCode - The out-of-band code sent to the user.\n * @param {string} newPassword - The new password.\n * @returns {Promise<void>}\n */\nexport async function confirmPasswordReset(auth, oobCode, newPassword) {\n  return auth.confirmPasswordReset(oobCode, newPassword);\n}\n\n/**\n * Changes the Auth instance to communicate with the Firebase Auth Emulator, instead of production Firebase Auth services.\n * @param {Auth} auth - The Auth instance.\n * @param {string} url - The URL of the Firebase Auth Emulator.\n * @param {{ disableWarnings: boolean }} [options] - Optional. Options for the emulator connection.\n */\nexport function connectAuthEmulator(auth, url, options) {\n  auth.useEmulator(url, options);\n}\n\n/**\n * Creates a new user account associated with the specified email address and password.\n * @param {Auth} auth - The Auth instance.\n * @param {string} email - The user's email address.\n * @param {string} password - The user's password.\n * @returns {Promise<UserCredential>}\n */\nexport async function createUserWithEmailAndPassword(auth, email, password) {\n  return auth.createUserWithEmailAndPassword(email, password);\n}\n\n/**\n * Gets the list of possible sign in methods for the given email address.\n * @param {Auth} auth - The Auth instance.\n * @param {string} email - The user's email address.\n * @returns {Promise<string[]>}\n */\nexport async function fetchSignInMethodsForEmail(auth, email) {\n  return auth.fetchSignInMethodsForEmail(email);\n}\n\n/**\n * Provides a MultiFactorResolver suitable for completion of a multi-factor flow.\n * @param {Auth} auth - The Auth instance.\n * @param {MultiFactorError} error - The multi-factor error.\n * @returns {MultiFactorResolver}\n */\nexport function getMultiFactorResolver(auth, error) {\n  return auth.getMultiFactorResolver(error);\n}\n\n/**\n * Returns a UserCredential from the redirect-based sign-in flow.\n * @param {Auth} auth - The Auth instance.\n * @param {PopupRedirectResolver} [resolver] - Optional. The popup redirect resolver.\n * @returns {Promise<UserCredential | null>}\n */\nexport async function getRedirectResult(auth, resolver) {\n  throw new Error('getRedirectResult is unsupported by the native Firebase SDKs');\n}\n\n/**\n * Checks if an incoming link is a sign-in with email link suitable for signInWithEmailLink().\n * @param {Auth} auth - The Auth instance.\n * @param {string} emailLink - The email link to check.\n * @returns {boolean}\n */\nexport function isSignInWithEmailLink(auth, emailLink) {\n  return auth.isSignInWithEmailLink(emailLink);\n}\n\n/**\n * Adds an observer for changes to the user's sign-in state.\n * @param {Auth} auth - The Auth instance.\n * @param {CallbackOrObserver<AuthListenerCallback>} nextOrObserver - A callback function or observer for auth state changes.\n * @returns {() => void}\n */\nexport function onAuthStateChanged(auth, nextOrObserver) {\n  return auth.onAuthStateChanged(nextOrObserver);\n}\n\n/**\n * Adds an observer for changes to the signed-in user's ID token.\n * @param {Auth} auth - The Auth instance.\n * @param {CallbackOrObserver<AuthListenerCallback>} nextOrObserver - A callback function or observer for ID token changes.\n * @returns {() => void}\n */\nexport function onIdTokenChanged(auth, nextOrObserver) {\n  return auth.onIdTokenChanged(nextOrObserver);\n}\n\n/**\n * Sends a password reset email to the given email address.\n * @param {Auth} auth - The Auth instance.\n * @param {string} email - The user's email address.\n * @param {ActionCodeSettings} [actionCodeSettings] - Optional. Action code settings.\n * @returns {Promise<void>}\n */\nexport async function sendPasswordResetEmail(auth, email, actionCodeSettings) {\n  return auth.sendPasswordResetEmail(email, actionCodeSettings);\n}\n\n/**\n * Sends a sign-in email link to the user with the specified email.\n * @param {Auth} auth - The Auth instance.\n * @param {string} email - The user's email address.\n * @param {ActionCodeSettings} [actionCodeSettings] - Optional. Action code settings.\n * @returns {Promise<void>}\n */\nexport async function sendSignInLinkToEmail(auth, email, actionCodeSettings) {\n  return auth.sendSignInLinkToEmail(email, actionCodeSettings);\n}\n\n/**\n * Changes the type of persistence on the Auth instance for the currently saved Auth session and applies this type of persistence for future sign-in requests, including sign-in with redirect requests.\n * @param {Auth} auth - The Auth instance.\n * @param {Persistence} persistence - The persistence type.\n * @returns {Promise<void>}\n */\nexport async function setPersistence(auth, persistence) {\n  throw new Error('setPersistence is unsupported by the native Firebase SDKs');\n}\n\n/**\n * Asynchronously signs in as an anonymous user.\n * @param {Auth} auth - The Auth instance.\n * @returns {Promise<UserCredential>}\n */\nexport async function signInAnonymously(auth) {\n  return auth.signInAnonymously();\n}\n\n/**\n * Asynchronously signs in with the given credentials.\n * @param {Auth} auth - The Auth instance.\n * @param {AuthCredential} credential - The auth credentials.\n * @returns {Promise<UserCredential>}\n */\nexport async function signInWithCredential(auth, credential) {\n  return auth.signInWithCredential(credential);\n}\n\n/**\n * Asynchronously signs in using a custom token.\n * @param {Auth} auth - The Auth instance.\n * @param {string} customToken - The custom token.\n * @returns {Promise<UserCredential>}\n */\nexport async function signInWithCustomToken(auth, customToken) {\n  return auth.signInWithCustomToken(customToken);\n}\n\n/**\n * Asynchronously signs in using an email and password.\n * @param {Auth} auth - The Auth instance.\n * @param {string} email - The user's email address.\n * @param {string} password - The user's password.\n * @returns {Promise<UserCredential>}\n */\nexport async function signInWithEmailAndPassword(auth, email, password) {\n  return auth.signInWithEmailAndPassword(email, password);\n}\n\n/**\n * Asynchronously signs in using an email and sign-in email link.\n * @param {Auth} auth - The Auth instance.\n * @param {string} email - The user's email address.\n * @param {string} emailLink - The email link.\n * @returns {Promise<UserCredential>}\n */\nexport async function signInWithEmailLink(auth, email, emailLink) {\n  return auth.signInWithEmailLink(email, emailLink);\n}\n\n/**\n * Asynchronously signs in using a phone number.\n * @param {Auth} auth - The Auth instance.\n * @param {string} phoneNumber - The user's phone number.\n * @param {ApplicationVerifier} appVerifier - The application verifier.\n * @returns {Promise<ConfirmationResult>}\n */\nexport async function signInWithPhoneNumber(auth, phoneNumber, appVerifier) {\n  return auth.signInWithPhoneNumber(phoneNumber, appVerifier);\n}\n\n/**\n * Asynchronously verifies a phone number.\n * @param {Auth} auth - The Auth instance.\n * @param {string} phoneNumber - The user's phone number.\n * @param {number | boolean} autoVerifyTimeoutOrForceResend - The auto verify timeout or force resend flag.\n * @param {boolean} [forceResend] - Optional. Whether to force resend.\n * @returns {PhoneAuthListener}\n */\nexport function verifyPhoneNumber(auth, phoneNumber, autoVerifyTimeoutOrForceResend, forceResend) {\n  return auth.verifyPhoneNumber(phoneNumber, autoVerifyTimeoutOrForceResend, forceResend);\n}\n\n/**\n * Authenticates a Firebase client using a popup-based OAuth authentication flow.\n * @param {Auth} auth - The Auth instance.\n * @param {AuthProvider} provider - The auth provider.\n * @param {PopupRedirectResolver} [resolver] - Optional. The popup redirect resolver.\n * @returns {Promise<UserCredential>}\n */\nexport async function signInWithPopup(auth, provider, resolver) {\n  return auth.signInWithPopup(provider, resolver);\n}\n\n/**\n * Authenticates a Firebase client using a full-page redirect flow.\n * @param {Auth} auth - The Auth instance.\n * @param {AuthProvider} provider - The auth provider.\n * @param {PopupRedirectResolver} [resolver] - Optional. The popup redirect resolver.\n * @returns {Promise<void>}\n */\nexport async function signInWithRedirect(auth, provider, resolver) {\n  return auth.signInWithRedirect(provider, resolver);\n}\n\n/**\n * Signs out the current user.\n * @param {Auth} auth - The Auth instance.\n * @returns {Promise<void>}\n */\nexport async function signOut(auth) {\n  return auth.signOut();\n}\n\n/**\n * Asynchronously sets the provided user as Auth.currentUser on the Auth instance.\n * @param {Auth} auth - The Auth instance.\n * @param {User} user - The user to set as the current user.\n * @returns {Promise<void>}\n */\nexport async function updateCurrentUser(auth, user) {\n  throw new Error('updateCurrentUser is unsupported by the native Firebase SDKs');\n}\n\n/**\n * Sets the current language to the default device/browser preference.\n * @param {Auth} auth - The Auth instance.\n */\nexport function useDeviceLanguage(auth) {\n  throw new Error('useDeviceLanguage is unsupported by the native Firebase SDKs');\n}\n\n/**\n * Sets the current language to the default device/browser preference.\n * @param {Auth} auth - The Auth instance.\n * @param {string} userAccessGroup - The user access group.\n * @returns {Promise<void>}\n */\nexport function useUserAccessGroup(auth, userAccessGroup) {\n  return auth.useUserAccessGroup(userAccessGroup);\n}\n\n/**\n * Verifies the password reset code sent to the user by email or other out-of-band mechanism.\n * @param {Auth} auth - The Auth instance.\n * @param {string} code - The password reset code.\n * @returns {Promise<string>}\n */\nexport async function verifyPasswordResetCode(auth, code) {\n  return auth.verifyPasswordResetCode(code);\n}\n\n/**\n * Parses the email action link string and returns an ActionCodeURL if the link is valid, otherwise returns null.\n * @param {string} link - The email action link string.\n * @returns {ActionCodeURL | null}\n */\nexport function parseActionCodeURL(link) {\n  throw new Error('parseActionCodeURL is unsupported by the native Firebase SDKs');\n}\n\n/**\n * Deletes and signs out the user.\n * @param {User} user - The user to delete.\n * @returns {Promise<void>}\n */\nexport async function deleteUser(user) {\n  return user.delete();\n}\n\n/**\n * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.\n * @param {User} user - The user to get the token for.\n * @param {boolean} [forceRefresh] - Optional. Whether to force refresh the token.\n * @returns {Promise<string>}\n */\nexport async function getIdToken(user, forceRefresh) {\n  return user.getIdToken(forceRefresh);\n}\n\n/**\n * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.\n * @param {User} user - The user to get the token result for.\n * @param {boolean} [forceRefresh] - Optional. Whether to force refresh the token.\n * @returns {Promise<IdTokenResult>}\n */\nexport async function getIdTokenResult(user, forceRefresh) {\n  return user.getIdTokenResult(forceRefresh);\n}\n\n/**\n * Links the user account with the given credentials.\n * @param {User} user - The user to link the credentials with.\n * @param {AuthCredential} credential - The auth credentials.\n * @returns {Promise<UserCredential>}\n */\nexport async function linkWithCredential(user, credential) {\n  return user.linkWithCredential(credential);\n}\n\n/**\n * Links the user account with the given phone number.\n * @param {User} user - The user to link the phone number with.\n * @param {string} phoneNumber - The phone number.\n * @param {ApplicationVerifier} appVerifier - The application verifier.\n * @returns {Promise<ConfirmationResult>}\n */\nexport async function linkWithPhoneNumber(user, phoneNumber, appVerifier) {\n  throw new Error('linkWithPhoneNumber is unsupported by the native Firebase SDKs');\n}\n\n/**\n * Links the authenticated provider to the user account using a pop-up based OAuth flow.\n * @param {User} user - The user to link the provider with.\n * @param {AuthProvider} provider - The auth provider.\n * @param {PopupRedirectResolver} [resolver] - Optional. The popup redirect resolver.\n * @returns {Promise<UserCredential>}\n */\nexport async function linkWithPopup(user, provider, resolver) {\n  return user.linkWithPopup(provider, resolver);\n}\n\n/**\n * Links the OAuthProvider to the user account using a full-page redirect flow.\n * @param {User} user - The user to link the provider with.\n * @param {AuthProvider} provider - The auth provider.\n * @param {PopupRedirectResolver} [resolver] - Optional. The popup redirect resolver.\n * @returns {Promise<void>}\n */\nexport async function linkWithRedirect(user, provider, resolver) {\n  return user.linkWithRedirect(provider, resolver);\n}\n\n/**\n * The MultiFactorUser corresponding to the user.\n * @param {User} user - The user to get the multi-factor user for.\n * @returns {MultiFactorUser}\n */\nexport function multiFactor(user) {\n  return user._auth.multiFactor(user);\n}\n\n/**\n * Re-authenticates a user using a fresh credential.\n * @param {User} user - The user to re-authenticate.\n * @param {AuthCredential} credential - The auth credentials.\n * @returns {Promise<UserCredential>}\n */\nexport async function reauthenticateWithCredential(user, credential) {\n  return user.reauthenticateWithCredential(credential);\n}\n\n/**\n * Re-authenticates a user using a fresh phone credential.\n * @param {User} user - The user to re-authenticate.\n * @param {string} phoneNumber - The phone number.\n * @param {ApplicationVerifier} appVerifier - The application verifier.\n * @returns {Promise<ConfirmationResult>}\n */\nexport async function reauthenticateWithPhoneNumber(user, phoneNumber, appVerifier) {\n  throw new Error('reauthenticateWithPhoneNumber is unsupported by the native Firebase SDKs');\n}\n\n/**\n * Reauthenticates the current user with the specified OAuthProvider using a pop-up based OAuth flow.\n * @param {User} user - The user to re-authenticate.\n * @param {AuthProvider} provider - The auth provider.\n * @param {PopupRedirectResolver} [resolver] - Optional. The popup redirect resolver.\n * @returns {Promise<UserCredential>}\n */\nexport async function reauthenticateWithPopup(user, provider, resolver) {\n  return user.reauthenticateWithPopup(provider, resolver);\n}\n\n/**\n * Reauthenticates the current user with the specified OAuthProvider using a full-page redirect flow.\n * @param {User} user - The user to re-authenticate.\n * @param {AuthProvider} provider - The auth provider.\n * @param {PopupRedirectResolver} [resolver] - Optional. The popup redirect resolver.\n * @returns {Promise<void>}\n */\nexport async function reauthenticateWithRedirect(user, provider, resolver) {\n  return user.reauthenticateWithRedirect(provider, resolver);\n}\n\n/**\n * Reloads user account data, if signed in.\n * @param {User} user - The user to reload data for.\n * @returns {Promise<void>}\n */\nexport async function reload(user) {\n  return user.reload();\n}\n\n/**\n * Sends a verification email to a user.\n * @param {User} user - The user to send the email to.\n * @param {ActionCodeSettings} [actionCodeSettings] - Optional. Action code settings.\n * @returns {Promise<void>}\n */\nexport async function sendEmailVerification(user, actionCodeSettings) {\n  return user.sendEmailVerification(actionCodeSettings);\n}\n\n/**\n * Unlinks a provider from a user account.\n * @param {User} user - The user to unlink the provider from.\n * @param {string} providerId - The provider ID.\n * @returns {Promise<User>}\n */\nexport async function unlink(user, providerId) {\n  return user.unlink(providerId);\n}\n\n/**\n * Updates the user's email address.\n * @param {User} user - The user to update the email for.\n * @param {string} newEmail - The new email address.\n * @returns {Promise<void>}\n */\nexport async function updateEmail(user, newEmail) {\n  return user.updateEmail(newEmail);\n}\n\n/**\n * Updates the user's password.\n * @param {User} user - The user to update the password for.\n * @param {string} newPassword - The new password.\n * @returns {Promise<void>}\n */\nexport async function updatePassword(user, newPassword) {\n  return user.updatePassword(newPassword);\n}\n\n/**\n * Updates the user's phone number.\n * @param {User} user - The user to update the phone number for.\n * @param {AuthCredential} credential - The auth credentials.\n * @returns {Promise<void>}\n */\nexport async function updatePhoneNumber(user, credential) {\n  return user.updatePhoneNumber(credential);\n}\n\n/**\n * Updates a user's profile data.\n * @param {User} user - The user to update the profile for.\n * @param {{ displayName?: string | null, photoURL?: string | null }} profile - An object containing the profile data to update.\n * @returns {Promise<void>}\n */\nexport async function updateProfile(user, { displayName, photoURL: photoUrl }) {\n  return user.updateProfile({ displayName, photoURL: photoUrl });\n}\n\n/**\n * Sends a verification email to a new email address.\n * @param {User} user - The user to send the email to.\n * @param {string} newEmail - The new email address.\n * @param {ActionCodeSettings} [actionCodeSettings] - Optional. Action code settings.\n * @returns {Promise<void>}\n */\nexport async function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {\n  return user.verifyBeforeUpdateEmail(newEmail, actionCodeSettings);\n}\n\n/**\n * Extracts provider specific AdditionalUserInfo for the given credential.\n * @param {UserCredential} userCredential - The user credential.\n * @returns {AdditionalUserInfo | null}\n */\nexport function getAdditionalUserInfo(userCredential) {\n  return userCredential.additionalUserInfo;\n}\n\n/**\n * Returns the custom auth domain for the auth instance.\n * @param {Auth} auth - The Auth instance.\n * @returns {Promise<string>}\n */\nexport function getCustomAuthDomain(auth) {\n  return auth.getCustomAuthDomain();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}