{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { initializeApp as _initializeApp, setLogLevel as _setLogLevel, getApp, getApps, deleteApp as _deleteApp } from './firebaseApp';\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nvar jsReady = false;\nvar jsListenerCount = 0;\nvar queuedEvents = [];\nvar jsListeners = {};\nvar fakePreferencesStorage = {};\nfunction eventsGetListenersMap() {\n  return {\n    listeners: jsListenerCount,\n    queued: queuedEvents.length,\n    events: jsListeners\n  };\n}\nfunction eventsSendEvent(eventName, eventBody) {\n  if (!jsReady || !jsListeners.hasOwnProperty(eventName)) {\n    var event = {\n      eventName: eventName,\n      eventBody: eventBody\n    };\n    queuedEvents.push(event);\n    return;\n  }\n  setImmediate(function () {\n    return DeviceEventEmitter.emit('rnfb_' + eventName, eventBody);\n  });\n}\nfunction eventsSendQueuedEvents() {\n  if (queuedEvents.length === 0) {\n    return;\n  }\n  var events = Array.from(queuedEvents);\n  queuedEvents = [];\n  for (var i = 0; i < events.length; i++) {\n    var event = events[i];\n    eventsSendEvent(event.eventName, event.eventBody);\n  }\n}\nexport default {\n  NATIVE_FIREBASE_APPS: [],\n  FIREBASE_RAW_JSON: '{}',\n  initializeApp: function () {\n    var _initializeApp2 = _asyncToGenerator(function* (options, appConfig) {\n      var name = appConfig.name;\n      var existingApp = getApps().find(function (app) {\n        return app.name === name;\n      });\n      if (existingApp) {\n        return existingApp;\n      }\n      var newAppConfig = {\n        name: name\n      };\n      if (appConfig.automaticDataCollectionEnabled === true || appConfig.automaticDataCollectionEnabled === false) {\n        newAppConfig.automaticDataCollectionEnabled = appConfig.automaticDataCollectionEnabled;\n      }\n      var optionsCopy = Object.assign({}, options);\n      if (optionsCopy.gaTrackingId) {\n        optionsCopy.measurementId = optionsCopy.gaTrackingId;\n      }\n      delete optionsCopy.clientId;\n      _initializeApp(optionsCopy, newAppConfig);\n      return {\n        options: options,\n        appConfig: appConfig\n      };\n    });\n    function initializeApp(_x, _x2) {\n      return _initializeApp2.apply(this, arguments);\n    }\n    return initializeApp;\n  }(),\n  setLogLevel: function setLogLevel(logLevel) {\n    _setLogLevel(logLevel);\n  },\n  setAutomaticDataCollectionEnabled: function setAutomaticDataCollectionEnabled(appName, enabled) {\n    getApp(appName).automaticDataCollectionEnabled = enabled;\n  },\n  deleteApp: function () {\n    var _deleteApp2 = _asyncToGenerator(function* (appName) {\n      if (getApp(appName)) {\n        _deleteApp(appName);\n      }\n    });\n    function deleteApp(_x3) {\n      return _deleteApp2.apply(this, arguments);\n    }\n    return deleteApp;\n  }(),\n  metaGetAll: function metaGetAll() {\n    return {};\n  },\n  jsonGetAll: function jsonGetAll() {\n    return {};\n  },\n  preferencesSetBool: function () {\n    var _preferencesSetBool = _asyncToGenerator(function* (key, value) {\n      fakePreferencesStorage[key] = value;\n    });\n    function preferencesSetBool(_x4, _x5) {\n      return _preferencesSetBool.apply(this, arguments);\n    }\n    return preferencesSetBool;\n  }(),\n  preferencesSetString: function preferencesSetString(key, value) {\n    fakePreferencesStorage[key] = value;\n  },\n  preferencesGetAll: function preferencesGetAll() {\n    return Object.assign({}, fakePreferencesStorage);\n  },\n  preferencesClearAll: function preferencesClearAll() {\n    fakePreferencesStorage = {};\n  },\n  addListener: function addListener() {},\n  removeListeners: function removeListeners() {},\n  eventsNotifyReady: function eventsNotifyReady(ready) {\n    jsReady = ready;\n    if (jsReady) {\n      setImmediate(function () {\n        return eventsSendQueuedEvents();\n      });\n    }\n  },\n  eventsGetListeners: function eventsGetListeners() {\n    return eventsGetListenersMap();\n  },\n  eventsPing: function eventsPing(eventName, eventBody) {\n    eventsSendEvent(eventName, eventBody);\n  },\n  eventsAddListener: function eventsAddListener(eventName) {\n    jsListenerCount++;\n    if (!jsListeners.hasOwnProperty(eventName)) {\n      jsListeners[eventName] = 1;\n    } else {\n      jsListeners[eventName]++;\n    }\n    setImmediate(function () {\n      return eventsSendQueuedEvents();\n    });\n  },\n  eventsRemoveListener: function eventsRemoveListener(eventName, all) {\n    if (jsListeners.hasOwnProperty(eventName)) {\n      if (jsListeners[eventName] <= 1 || all) {\n        var count = jsListeners[eventName];\n        jsListenerCount -= count;\n        delete jsListeners[eventName];\n      } else {\n        jsListenerCount--;\n        jsListeners[eventName]--;\n      }\n    }\n  }\n};","map":{"version":3,"names":["initializeApp","setLogLevel","getApp","getApps","deleteApp","DeviceEventEmitter","jsReady","jsListenerCount","queuedEvents","jsListeners","fakePreferencesStorage","eventsGetListenersMap","listeners","queued","length","events","eventsSendEvent","eventName","eventBody","hasOwnProperty","event","push","setImmediate","emit","eventsSendQueuedEvents","Array","from","i","NATIVE_FIREBASE_APPS","FIREBASE_RAW_JSON","_initializeApp2","_asyncToGenerator","options","appConfig","name","existingApp","find","app","newAppConfig","automaticDataCollectionEnabled","optionsCopy","Object","assign","gaTrackingId","measurementId","clientId","_x","_x2","apply","arguments","logLevel","setAutomaticDataCollectionEnabled","appName","enabled","_deleteApp2","_x3","metaGetAll","jsonGetAll","preferencesSetBool","_preferencesSetBool","key","value","_x4","_x5","preferencesSetString","preferencesGetAll","preferencesClearAll","addListener","removeListeners","eventsNotifyReady","ready","eventsGetListeners","eventsPing","eventsAddListener","eventsRemoveListener","all","count"],"sources":["C:/Users/richard.5935/Downloads/Yzon/node_modules/@react-native-firebase/app/lib/internal/web/RNFBAppModule.js"],"sourcesContent":["/* eslint-disable no-console */\nimport { initializeApp, setLogLevel, getApp, getApps, deleteApp } from './firebaseApp';\n\nimport { DeviceEventEmitter } from 'react-native';\n\n// Variables for events tracking.\nlet jsReady = false;\nlet jsListenerCount = 0;\nlet queuedEvents = [];\nlet jsListeners = {};\n\n// For compatibility we have a fake preferences storage,\n// it does not persist across app restarts.\nlet fakePreferencesStorage = {};\n\nfunction eventsGetListenersMap() {\n  return {\n    listeners: jsListenerCount,\n    queued: queuedEvents.length,\n    events: jsListeners,\n  };\n}\n\nfunction eventsSendEvent(eventName, eventBody) {\n  if (!jsReady || !jsListeners.hasOwnProperty(eventName)) {\n    const event = {\n      eventName,\n      eventBody,\n    };\n    queuedEvents.push(event);\n    return;\n  }\n  setImmediate(() => DeviceEventEmitter.emit('rnfb_' + eventName, eventBody));\n}\n\nfunction eventsSendQueuedEvents() {\n  if (queuedEvents.length === 0) {\n    return;\n  }\n  const events = Array.from(queuedEvents);\n  queuedEvents = [];\n  for (let i = 0; i < events.length; i++) {\n    const event = events[i];\n    eventsSendEvent(event.eventName, event.eventBody);\n  }\n}\n\nexport default {\n  // Natively initialized apps, but in the case of web, we don't have any.\n  NATIVE_FIREBASE_APPS: [],\n  // The raw JSON string of the Firebase config, from the users firebase.json file.\n  // In the case of web, we can't support this.\n  FIREBASE_RAW_JSON: '{}',\n\n  /**\n   * Initializes a Firebase app.\n   *\n   * @param {object} options - The Firebase app options.\n   * @param {object} appConfig - The Firebase app config.\n   * @returns {object} - The Firebase app instance.\n   */\n  async initializeApp(options, appConfig) {\n    const name = appConfig.name;\n    const existingApp = getApps().find(app => app.name === name);\n    if (existingApp) {\n      return existingApp;\n    }\n    const newAppConfig = {\n      name,\n    };\n    if (\n      appConfig.automaticDataCollectionEnabled === true ||\n      appConfig.automaticDataCollectionEnabled === false\n    ) {\n      newAppConfig.automaticDataCollectionEnabled = appConfig.automaticDataCollectionEnabled;\n    }\n    const optionsCopy = Object.assign({}, options);\n    // TODO RNFB is using the old gaTrackingId property, we should remove this in the future\n    // in favor of the measurementId property.\n    if (optionsCopy.gaTrackingId) {\n      optionsCopy.measurementId = optionsCopy.gaTrackingId;\n    }\n    delete optionsCopy.clientId;\n    initializeApp(optionsCopy, newAppConfig);\n    return {\n      options,\n      appConfig,\n    };\n  },\n\n  /**\n   * Sets the log level for the Firebase app.\n   *\n   * @param {string} logLevel - The log level to set.\n   */\n  setLogLevel(logLevel) {\n    setLogLevel(logLevel);\n  },\n\n  /**\n   * Sets the automatic data collection for the Firebase app.\n   *\n   * @param {string} appName - The name of the Firebase app.\n   * @param {boolean} enabled - Whether to enable automatic data collection.\n   */\n  setAutomaticDataCollectionEnabled(appName, enabled) {\n    getApp(appName).automaticDataCollectionEnabled = enabled;\n  },\n\n  /**\n   * Deletes a Firebase app.\n   *\n   * @param {string} appName - The name of the Firebase app to delete.\n   */\n  async deleteApp(appName) {\n    if (getApp(appName)) {\n      deleteApp(appName);\n    }\n  },\n\n  /**\n   * Gets the meta data.\n   * Unsupported on web.\n   *\n   * @returns {object} - The meta data\n   */\n  metaGetAll() {\n    return {};\n  },\n\n  /**\n   * Gets the firebase.json data.\n   * Unsupported on web.\n   *\n   * @returns {object} - The JSON data for the firebase.json file.\n   */\n  jsonGetAll() {\n    return {};\n  },\n\n  /**\n   * Sets a boolean value for a preference.\n   * Unsupported on web.\n   *\n   * @param {string} key - The key of the preference.\n   * @param {boolean} value - The value to set.\n   */\n  async preferencesSetBool(key, value) {\n    fakePreferencesStorage[key] = value;\n  },\n\n  /**\n   * Sets a string value for a preference.\n   * Unsupported on web.\n   *\n   * @param {string} key - The key of the preference.\n   * @param {string} value - The value to set.\n   */\n  preferencesSetString(key, value) {\n    fakePreferencesStorage[key] = value;\n  },\n\n  /**\n   * Gets all preferences.\n   * Unsupported on web.\n   *\n   * @returns {object} - The preferences.\n   */\n  preferencesGetAll() {\n    return Object.assign({}, fakePreferencesStorage);\n  },\n\n  /**\n   * Clears all preferences.\n   * Unsupported on web.\n   */\n  preferencesClearAll() {\n    fakePreferencesStorage = {};\n  },\n\n  /**\n   * Adds a listener for an event.\n   * Unsupported on web.\n   *\n   * @param {string} eventName - The name of the event to listen for.\n   */\n  addListener() {\n    // Keep: Required for RN built in Event Emitter Calls.\n  },\n  /**\n   * Removes a listener for an event.\n   * Unsupported on web.\n   *\n   * @param {string} eventName - The name of the event to remove the listener for.\n   */\n  removeListeners() {\n    // Keep: Required for RN built in Event Emitter Calls.\n  },\n\n  /**\n   * Notifies the app that it is ready to receive events.\n   *\n   * @param {boolean} ready - Whether the app is ready to receive events.\n   * @returns {void}\n   */\n  eventsNotifyReady(ready) {\n    jsReady = ready;\n    if (jsReady) {\n      setImmediate(() => eventsSendQueuedEvents());\n    }\n  },\n\n  /**\n   * Gets all the listeners registered.\n   *\n   * @returns {object} - The listeners for the event.\n   */\n  eventsGetListeners() {\n    return eventsGetListenersMap();\n  },\n\n  /**\n   * Sends an event to the app for testing purposes.\n   *\n   * @param {string} eventName - The name of the event to send.\n   * @param {object} eventBody - The body of the event to send.\n   * @returns {void}\n   */\n  eventsPing(eventName, eventBody) {\n    eventsSendEvent(eventName, eventBody);\n  },\n\n  /**\n   * Adds a listener for an event.\n   *\n   * @param {string} eventName - The name of the event to listen for.\n   */\n  eventsAddListener(eventName) {\n    jsListenerCount++;\n    if (!jsListeners.hasOwnProperty(eventName)) {\n      jsListeners[eventName] = 1;\n    } else {\n      jsListeners[eventName]++;\n    }\n    setImmediate(() => eventsSendQueuedEvents());\n  },\n\n  /**\n   * Removes a single listener for an event or all listeners for an event.\n   *\n   * @param {string} eventName - The name of the event to remove the listener for.\n   * @param {boolean} all - Optional. Whether to remove all listeners for the event.\n   */\n  eventsRemoveListener(eventName, all) {\n    if (jsListeners.hasOwnProperty(eventName)) {\n      if (jsListeners[eventName] <= 1 || all) {\n        const count = jsListeners[eventName];\n        jsListenerCount -= count;\n        delete jsListeners[eventName];\n      } else {\n        jsListenerCount--;\n        jsListeners[eventName]--;\n      }\n    }\n  },\n};\n"],"mappings":";AACA,SAASA,aAAa,IAAbA,cAAa,EAAEC,WAAW,IAAXA,YAAW,EAAEC,MAAM,EAAEC,OAAO,EAAEC,SAAS,IAATA,UAAS,QAAQ,eAAe;AAAC,OAAAC,kBAAA;AAKvF,IAAIC,OAAO,GAAG,KAAK;AACnB,IAAIC,eAAe,GAAG,CAAC;AACvB,IAAIC,YAAY,GAAG,EAAE;AACrB,IAAIC,WAAW,GAAG,CAAC,CAAC;AAIpB,IAAIC,sBAAsB,GAAG,CAAC,CAAC;AAE/B,SAASC,qBAAqBA,CAAA,EAAG;EAC/B,OAAO;IACLC,SAAS,EAAEL,eAAe;IAC1BM,MAAM,EAAEL,YAAY,CAACM,MAAM;IAC3BC,MAAM,EAAEN;EACV,CAAC;AACH;AAEA,SAASO,eAAeA,CAACC,SAAS,EAAEC,SAAS,EAAE;EAC7C,IAAI,CAACZ,OAAO,IAAI,CAACG,WAAW,CAACU,cAAc,CAACF,SAAS,CAAC,EAAE;IACtD,IAAMG,KAAK,GAAG;MACZH,SAAS,EAATA,SAAS;MACTC,SAAS,EAATA;IACF,CAAC;IACDV,YAAY,CAACa,IAAI,CAACD,KAAK,CAAC;IACxB;EACF;EACAE,YAAY,CAAC;IAAA,OAAMjB,kBAAkB,CAACkB,IAAI,CAAC,OAAO,GAAGN,SAAS,EAAEC,SAAS,CAAC;EAAA,EAAC;AAC7E;AAEA,SAASM,sBAAsBA,CAAA,EAAG;EAChC,IAAIhB,YAAY,CAACM,MAAM,KAAK,CAAC,EAAE;IAC7B;EACF;EACA,IAAMC,MAAM,GAAGU,KAAK,CAACC,IAAI,CAAClB,YAAY,CAAC;EACvCA,YAAY,GAAG,EAAE;EACjB,KAAK,IAAImB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,MAAM,CAACD,MAAM,EAAEa,CAAC,EAAE,EAAE;IACtC,IAAMP,KAAK,GAAGL,MAAM,CAACY,CAAC,CAAC;IACvBX,eAAe,CAACI,KAAK,CAACH,SAAS,EAAEG,KAAK,CAACF,SAAS,CAAC;EACnD;AACF;AAEA,eAAe;EAEbU,oBAAoB,EAAE,EAAE;EAGxBC,iBAAiB,EAAE,IAAI;EASjB7B,aAAa;IAAA,IAAA8B,eAAA,GAAAC,iBAAA,YAACC,OAAO,EAAEC,SAAS,EAAE;MACtC,IAAMC,IAAI,GAAGD,SAAS,CAACC,IAAI;MAC3B,IAAMC,WAAW,GAAGhC,OAAO,CAAC,CAAC,CAACiC,IAAI,CAAC,UAAAC,GAAG;QAAA,OAAIA,GAAG,CAACH,IAAI,KAAKA,IAAI;MAAA,EAAC;MAC5D,IAAIC,WAAW,EAAE;QACf,OAAOA,WAAW;MACpB;MACA,IAAMG,YAAY,GAAG;QACnBJ,IAAI,EAAJA;MACF,CAAC;MACD,IACED,SAAS,CAACM,8BAA8B,KAAK,IAAI,IACjDN,SAAS,CAACM,8BAA8B,KAAK,KAAK,EAClD;QACAD,YAAY,CAACC,8BAA8B,GAAGN,SAAS,CAACM,8BAA8B;MACxF;MACA,IAAMC,WAAW,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEV,OAAO,CAAC;MAG9C,IAAIQ,WAAW,CAACG,YAAY,EAAE;QAC5BH,WAAW,CAACI,aAAa,GAAGJ,WAAW,CAACG,YAAY;MACtD;MACA,OAAOH,WAAW,CAACK,QAAQ;MAC3B7C,cAAa,CAACwC,WAAW,EAAEF,YAAY,CAAC;MACxC,OAAO;QACLN,OAAO,EAAPA,OAAO;QACPC,SAAS,EAATA;MACF,CAAC;IACH,CAAC;IAAA,SA3BKjC,aAAaA,CAAA8C,EAAA,EAAAC,GAAA;MAAA,OAAAjB,eAAA,CAAAkB,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAbjD,aAAa;EAAA;EAkCnBC,WAAW,WAAXA,WAAWA,CAACiD,QAAQ,EAAE;IACpBjD,YAAW,CAACiD,QAAQ,CAAC;EACvB,CAAC;EAQDC,iCAAiC,WAAjCA,iCAAiCA,CAACC,OAAO,EAAEC,OAAO,EAAE;IAClDnD,MAAM,CAACkD,OAAO,CAAC,CAACb,8BAA8B,GAAGc,OAAO;EAC1D,CAAC;EAOKjD,SAAS;IAAA,IAAAkD,WAAA,GAAAvB,iBAAA,YAACqB,OAAO,EAAE;MACvB,IAAIlD,MAAM,CAACkD,OAAO,CAAC,EAAE;QACnBhD,UAAS,CAACgD,OAAO,CAAC;MACpB;IACF,CAAC;IAAA,SAJKhD,SAASA,CAAAmD,GAAA;MAAA,OAAAD,WAAA,CAAAN,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAT7C,SAAS;EAAA;EAYfoD,UAAU,WAAVA,UAAUA,CAAA,EAAG;IACX,OAAO,CAAC,CAAC;EACX,CAAC;EAQDC,UAAU,WAAVA,UAAUA,CAAA,EAAG;IACX,OAAO,CAAC,CAAC;EACX,CAAC;EASKC,kBAAkB;IAAA,IAAAC,mBAAA,GAAA5B,iBAAA,YAAC6B,GAAG,EAAEC,KAAK,EAAE;MACnCnD,sBAAsB,CAACkD,GAAG,CAAC,GAAGC,KAAK;IACrC,CAAC;IAAA,SAFKH,kBAAkBA,CAAAI,GAAA,EAAAC,GAAA;MAAA,OAAAJ,mBAAA,CAAAX,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAlBS,kBAAkB;EAAA;EAWxBM,oBAAoB,WAApBA,oBAAoBA,CAACJ,GAAG,EAAEC,KAAK,EAAE;IAC/BnD,sBAAsB,CAACkD,GAAG,CAAC,GAAGC,KAAK;EACrC,CAAC;EAQDI,iBAAiB,WAAjBA,iBAAiBA,CAAA,EAAG;IAClB,OAAOxB,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEhC,sBAAsB,CAAC;EAClD,CAAC;EAMDwD,mBAAmB,WAAnBA,mBAAmBA,CAAA,EAAG;IACpBxD,sBAAsB,GAAG,CAAC,CAAC;EAC7B,CAAC;EAQDyD,WAAW,WAAXA,WAAWA,CAAA,EAAG,CAEd,CAAC;EAODC,eAAe,WAAfA,eAAeA,CAAA,EAAG,CAElB,CAAC;EAQDC,iBAAiB,WAAjBA,iBAAiBA,CAACC,KAAK,EAAE;IACvBhE,OAAO,GAAGgE,KAAK;IACf,IAAIhE,OAAO,EAAE;MACXgB,YAAY,CAAC;QAAA,OAAME,sBAAsB,CAAC,CAAC;MAAA,EAAC;IAC9C;EACF,CAAC;EAOD+C,kBAAkB,WAAlBA,kBAAkBA,CAAA,EAAG;IACnB,OAAO5D,qBAAqB,CAAC,CAAC;EAChC,CAAC;EASD6D,UAAU,WAAVA,UAAUA,CAACvD,SAAS,EAAEC,SAAS,EAAE;IAC/BF,eAAe,CAACC,SAAS,EAAEC,SAAS,CAAC;EACvC,CAAC;EAODuD,iBAAiB,WAAjBA,iBAAiBA,CAACxD,SAAS,EAAE;IAC3BV,eAAe,EAAE;IACjB,IAAI,CAACE,WAAW,CAACU,cAAc,CAACF,SAAS,CAAC,EAAE;MAC1CR,WAAW,CAACQ,SAAS,CAAC,GAAG,CAAC;IAC5B,CAAC,MAAM;MACLR,WAAW,CAACQ,SAAS,CAAC,EAAE;IAC1B;IACAK,YAAY,CAAC;MAAA,OAAME,sBAAsB,CAAC,CAAC;IAAA,EAAC;EAC9C,CAAC;EAQDkD,oBAAoB,WAApBA,oBAAoBA,CAACzD,SAAS,EAAE0D,GAAG,EAAE;IACnC,IAAIlE,WAAW,CAACU,cAAc,CAACF,SAAS,CAAC,EAAE;MACzC,IAAIR,WAAW,CAACQ,SAAS,CAAC,IAAI,CAAC,IAAI0D,GAAG,EAAE;QACtC,IAAMC,KAAK,GAAGnE,WAAW,CAACQ,SAAS,CAAC;QACpCV,eAAe,IAAIqE,KAAK;QACxB,OAAOnE,WAAW,CAACQ,SAAS,CAAC;MAC/B,CAAC,MAAM;QACLV,eAAe,EAAE;QACjBE,WAAW,CAACQ,SAAS,CAAC,EAAE;MAC1B;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}