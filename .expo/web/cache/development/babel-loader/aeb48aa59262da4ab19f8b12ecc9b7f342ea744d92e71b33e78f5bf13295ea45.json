{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _superPropGet(t, e, o, r) { var p = _get(_getPrototypeOf(1 & r ? t.prototype : t), e, o); return 2 & r && \"function\" == typeof p ? function (t) { return p.apply(o, t); } : p; }\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport { getReactNativeModule } from './nativeModule';\nvar RNFBNativeEventEmitter = function (_NativeEventEmitter) {\n  function RNFBNativeEventEmitter() {\n    var _this;\n    _classCallCheck(this, RNFBNativeEventEmitter);\n    _this = _callSuper(this, RNFBNativeEventEmitter, [getReactNativeModule('RNFBAppModule')]);\n    _this.ready = false;\n    return _this;\n  }\n  _inherits(RNFBNativeEventEmitter, _NativeEventEmitter);\n  return _createClass(RNFBNativeEventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(eventType, listener, context) {\n      var _this2 = this;\n      var RNFBAppModule = getReactNativeModule('RNFBAppModule');\n      if (!this.ready) {\n        RNFBAppModule.eventsNotifyReady(true);\n        this.ready = true;\n      }\n      RNFBAppModule.eventsAddListener(eventType);\n      if (global.RNFBDebug) {\n        console.debug(`[RNFB-->Event][👂] ${eventType} -> listening`);\n      }\n      var listenerDebugger = function listenerDebugger() {\n        if (global.RNFBDebug) {\n          console.debug(`[RNFB<--Event][📣] ${eventType} <-`, JSON.stringify(arguments.length <= 0 ? undefined : arguments[0]));\n          if (global.RNFBTest && !global.RNFBDebugInTestLeakDetection) {\n            console.debug(`[TEST--->Leak][💡] Possible leaking test detected! An event (☝️) ` + `was received outside of any running tests which may indicates that some ` + `listeners/event subscriptions that have not been unsubscribed from in your ` + `test code. The last test that ran was: \"${global.RNFBDebugLastTest}\".`);\n          }\n        }\n        return listener.apply(void 0, arguments);\n      };\n      var subscription = _superPropGet(RNFBNativeEventEmitter, \"addListener\", this, 3)([`rnfb_${eventType}`, listenerDebugger, context]);\n      subscription.eventType = `rnfb_${eventType}`;\n      var originalRemove = subscription.remove;\n      var newRemove = function newRemove() {\n        RNFBAppModule.eventsRemoveListener(eventType, false);\n        if (_superPropGet(RNFBNativeEventEmitter, \"removeSubscription\", _this2, 1) != null) {\n          _superPropGet(RNFBNativeEventEmitter, \"removeSubscription\", _this2, 3)([subscription]);\n        } else if (originalRemove != null) {\n          originalRemove();\n        }\n      };\n      subscription.remove = newRemove;\n      return subscription;\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventType) {\n      var RNFBAppModule = getReactNativeModule('RNFBAppModule');\n      RNFBAppModule.eventsRemoveListener(eventType, true);\n      _superPropGet(RNFBNativeEventEmitter, \"removeAllListeners\", this, 3)([`rnfb_${eventType}`]);\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      var RNFBAppModule = getReactNativeModule('RNFBAppModule');\n      RNFBAppModule.eventsRemoveListener(subscription.eventType.replace('rnfb_'), false);\n      if (_superPropGet(RNFBNativeEventEmitter, \"removeSubscription\", this, 1)) {\n        _superPropGet(RNFBNativeEventEmitter, \"removeSubscription\", this, 3)([subscription]);\n      }\n    }\n  }]);\n}(NativeEventEmitter);\nexport default new RNFBNativeEventEmitter();","map":{"version":3,"names":["getReactNativeModule","RNFBNativeEventEmitter","_NativeEventEmitter","_this","_classCallCheck","_callSuper","ready","_inherits","_createClass","key","value","addListener","eventType","listener","context","_this2","RNFBAppModule","eventsNotifyReady","eventsAddListener","global","RNFBDebug","console","debug","listenerDebugger","JSON","stringify","arguments","length","undefined","RNFBTest","RNFBDebugInTestLeakDetection","RNFBDebugLastTest","apply","subscription","_superPropGet","originalRemove","remove","newRemove","eventsRemoveListener","removeAllListeners","removeSubscription","replace","NativeEventEmitter"],"sources":["C:/Users/richard.5935/Downloads/Yzon/node_modules/@react-native-firebase/app/lib/internal/RNFBNativeEventEmitter.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { NativeEventEmitter } from 'react-native';\nimport { getReactNativeModule } from './nativeModule';\n\nclass RNFBNativeEventEmitter extends NativeEventEmitter {\n  constructor() {\n    super(getReactNativeModule('RNFBAppModule'));\n    this.ready = false;\n  }\n\n  addListener(eventType, listener, context) {\n    const RNFBAppModule = getReactNativeModule('RNFBAppModule');\n    if (!this.ready) {\n      RNFBAppModule.eventsNotifyReady(true);\n      this.ready = true;\n    }\n    RNFBAppModule.eventsAddListener(eventType);\n    if (global.RNFBDebug) {\n      // eslint-disable-next-line no-console\n      console.debug(`[RNFB-->Event][👂] ${eventType} -> listening`);\n    }\n    const listenerDebugger = (...args) => {\n      if (global.RNFBDebug) {\n        // eslint-disable-next-line no-console\n        console.debug(`[RNFB<--Event][📣] ${eventType} <-`, JSON.stringify(args[0]));\n        // Possible leaking test if events are still being received after the test.\n        // This is not super accurate but it's better than nothing, e.g. if doing setup/teardown\n        // logic outside of a test this may cause false positives.\n        if (global.RNFBTest && !global.RNFBDebugInTestLeakDetection) {\n          // eslint-disable-next-line no-console\n          console.debug(\n            `[TEST--->Leak][💡] Possible leaking test detected! An event (☝️) ` +\n              `was received outside of any running tests which may indicates that some ` +\n              `listeners/event subscriptions that have not been unsubscribed from in your ` +\n              `test code. The last test that ran was: \"${global.RNFBDebugLastTest}\".`,\n          );\n        }\n      }\n      return listener(...args);\n    };\n\n    let subscription = super.addListener(`rnfb_${eventType}`, listenerDebugger, context);\n\n    // React Native 0.65+ altered EventEmitter:\n    // - removeSubscription is gone\n    // - addListener returns an unsubscriber instead of a more complex object with eventType etc\n\n    // make sure eventType for backwards compatibility just in case\n    subscription.eventType = `rnfb_${eventType}`;\n\n    // New style is to return a remove function on the object, just in case people call that,\n    // we will modify it to do our native unsubscription then call the original\n    let originalRemove = subscription.remove;\n    let newRemove = () => {\n      RNFBAppModule.eventsRemoveListener(eventType, false);\n      if (super.removeSubscription != null) {\n        // This is for RN <= 0.64 - 65 and greater no longer have removeSubscription\n        super.removeSubscription(subscription);\n      } else if (originalRemove != null) {\n        // This is for RN >= 0.65\n        originalRemove();\n      }\n    };\n    subscription.remove = newRemove;\n    return subscription;\n  }\n\n  removeAllListeners(eventType) {\n    const RNFBAppModule = getReactNativeModule('RNFBAppModule');\n    RNFBAppModule.eventsRemoveListener(eventType, true);\n    super.removeAllListeners(`rnfb_${eventType}`);\n  }\n\n  // This is likely no longer ever called, but it is here for backwards compatibility with RN <= 0.64\n  removeSubscription(subscription) {\n    const RNFBAppModule = getReactNativeModule('RNFBAppModule');\n    RNFBAppModule.eventsRemoveListener(subscription.eventType.replace('rnfb_'), false);\n    if (super.removeSubscription) {\n      super.removeSubscription(subscription);\n    }\n  }\n}\n\nexport default new RNFBNativeEventEmitter();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}