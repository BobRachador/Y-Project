{"ast":null,"code":"import _construct from \"@babel/runtime/helpers/construct\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { FieldPath, query, where, orderBy, limit, limitToLast, startAt, startAfter, endAt, endBefore, and, or } from '@react-native-firebase/app/lib/internal/web/firebaseFirestore';\nimport { parseTypeMap, readableToArray } from './convert';\nexport function buildQuery(queryInstance, filters, orders, options) {\n  for (var filter of filters) {\n    queryInstance = query(queryInstance, getFilterConstraint(filter));\n  }\n  for (var order of orders) {\n    var fieldPath = typeof order.fieldPath === 'string' ? order.fieldPath : _construct(FieldPath, _toConsumableArray(order.fieldPath));\n    var direction = order.direction === 'ASCENDING' ? 'asc' : 'desc';\n    queryInstance = query(queryInstance, orderBy(fieldPath, direction));\n  }\n  if ('limit' in options) {\n    queryInstance = query(queryInstance, limit(options.limit));\n  }\n  if ('limitToLast' in options) {\n    queryInstance = query(queryInstance, limitToLast(options.limitToLast));\n  }\n  if ('startAt' in options) {\n    var fieldList = readableToArray(queryInstance.firestore, options.startAt);\n    queryInstance = query(queryInstance, startAt.apply(void 0, _toConsumableArray(fieldList)));\n  }\n  if ('startAfter' in options) {\n    var _fieldList = readableToArray(queryInstance.firestore, options.startAfter);\n    queryInstance = query(queryInstance, startAfter.apply(void 0, _toConsumableArray(_fieldList)));\n  }\n  if ('endAt' in options) {\n    var _fieldList2 = readableToArray(queryInstance.firestore, options.endAt);\n    queryInstance = query(queryInstance, endAt.apply(void 0, _toConsumableArray(_fieldList2)));\n  }\n  if ('endBefore' in options) {\n    var _fieldList3 = readableToArray(queryInstance.firestore, options.endBefore);\n    queryInstance = query(queryInstance, endBefore.apply(void 0, _toConsumableArray(_fieldList3)));\n  }\n  return queryInstance;\n}\nfunction getFilterConstraint(filter) {\n  if ('fieldPath' in filter && filter.fieldPath) {\n    var fieldPath = Array.isArray(filter.fieldPath) ? _construct(FieldPath, _toConsumableArray(filter.fieldPath)) : _construct(FieldPath, _toConsumableArray(filter.fieldPath._segments));\n    var operator = filter.operator;\n    var value = parseTypeMap(query.firestore, filter.value);\n    switch (operator) {\n      case 'EQUAL':\n        return where(fieldPath, '==', value);\n      case 'NOT_EQUAL':\n        return where(fieldPath, '!=', value);\n      case 'GREATER_THAN':\n        return where(fieldPath, '>', value);\n      case 'GREATER_THAN_OR_EQUAL':\n        return where(fieldPath, '>=', value);\n      case 'LESS_THAN':\n        return where(fieldPath, '<', value);\n      case 'LESS_THAN_OR_EQUAL':\n        return where(fieldPath, '<=', value);\n      case 'ARRAY_CONTAINS':\n        return where(fieldPath, 'array-contains', value);\n      case 'ARRAY_CONTAINS_ANY':\n        return where(fieldPath, 'array-contains-any', value);\n      case 'IN':\n        return where(fieldPath, 'in', value);\n      case 'NOT_IN':\n        return where(fieldPath, 'not-in', value);\n    }\n  } else if ('operator' in filter && 'queries' in filter) {\n    var constraints = [];\n    for (var constraint of filter.queries) {\n      constraints.push(getFilterConstraint(constraint));\n    }\n    if (filter.operator === 'AND') {\n      return and.apply(void 0, constraints);\n    }\n    if (filter.operator === 'OR') {\n      return or.apply(void 0, constraints);\n    }\n    throw new Error('Invalid filter operator');\n  }\n  throw new Error('Invaldi filter.');\n}","map":{"version":3,"names":["FieldPath","query","where","orderBy","limit","limitToLast","startAt","startAfter","endAt","endBefore","and","or","parseTypeMap","readableToArray","buildQuery","queryInstance","filters","orders","options","filter","getFilterConstraint","order","fieldPath","_construct","_toConsumableArray","direction","fieldList","firestore","apply","Array","isArray","_segments","operator","value","constraints","constraint","queries","push","Error"],"sources":["C:/Users/richard.5935/Downloads/Yzon/node_modules/@react-native-firebase/firestore/lib/web/query.js"],"sourcesContent":["import {\n  FieldPath,\n  query,\n  where,\n  orderBy,\n  limit,\n  limitToLast,\n  startAt,\n  startAfter,\n  endAt,\n  endBefore,\n  and,\n  or,\n} from '@react-native-firebase/app/lib/internal/web/firebaseFirestore';\nimport { parseTypeMap, readableToArray } from './convert';\n\nexport function buildQuery(queryInstance, filters, orders, options) {\n  // Apply filters\n  for (const filter of filters) {\n    queryInstance = query(queryInstance, getFilterConstraint(filter));\n  }\n\n  // Apply orders\n  for (const order of orders) {\n    const fieldPath =\n      typeof order.fieldPath === 'string' ? order.fieldPath : new FieldPath(...order.fieldPath);\n    const direction = order.direction === 'ASCENDING' ? 'asc' : 'desc';\n    queryInstance = query(queryInstance, orderBy(fieldPath, direction));\n  }\n\n  // Apply options\n  if ('limit' in options) {\n    queryInstance = query(queryInstance, limit(options.limit));\n  }\n\n  if ('limitToLast' in options) {\n    queryInstance = query(queryInstance, limitToLast(options.limitToLast));\n  }\n\n  if ('startAt' in options) {\n    const fieldList = readableToArray(queryInstance.firestore, options.startAt);\n    queryInstance = query(queryInstance, startAt(...fieldList));\n  }\n\n  if ('startAfter' in options) {\n    const fieldList = readableToArray(queryInstance.firestore, options.startAfter);\n    queryInstance = query(queryInstance, startAfter(...fieldList));\n  }\n\n  if ('endAt' in options) {\n    const fieldList = readableToArray(queryInstance.firestore, options.endAt);\n    queryInstance = query(queryInstance, endAt(...fieldList));\n  }\n\n  if ('endBefore' in options) {\n    const fieldList = readableToArray(queryInstance.firestore, options.endBefore);\n    queryInstance = query(queryInstance, endBefore(...fieldList));\n  }\n\n  return queryInstance;\n}\n\nfunction getFilterConstraint(filter) {\n  if ('fieldPath' in filter && filter.fieldPath) {\n    const fieldPath = Array.isArray(filter.fieldPath)\n      ? new FieldPath(...filter.fieldPath)\n      : new FieldPath(...filter.fieldPath._segments);\n    const operator = filter.operator;\n    const value = parseTypeMap(query.firestore, filter.value);\n\n    switch (operator) {\n      case 'EQUAL':\n        return where(fieldPath, '==', value);\n      case 'NOT_EQUAL':\n        return where(fieldPath, '!=', value);\n      case 'GREATER_THAN':\n        return where(fieldPath, '>', value);\n      case 'GREATER_THAN_OR_EQUAL':\n        return where(fieldPath, '>=', value);\n      case 'LESS_THAN':\n        return where(fieldPath, '<', value);\n      case 'LESS_THAN_OR_EQUAL':\n        return where(fieldPath, '<=', value);\n      case 'ARRAY_CONTAINS':\n        return where(fieldPath, 'array-contains', value);\n      case 'ARRAY_CONTAINS_ANY':\n        return where(fieldPath, 'array-contains-any', value);\n      case 'IN':\n        return where(fieldPath, 'in', value);\n      case 'NOT_IN':\n        return where(fieldPath, 'not-in', value);\n    }\n  } else if ('operator' in filter && 'queries' in filter) {\n    const constraints = [];\n\n    for (const constraint of filter.queries) {\n      constraints.push(getFilterConstraint(constraint));\n    }\n\n    if (filter.operator === 'AND') {\n      return and(...constraints);\n    }\n\n    if (filter.operator === 'OR') {\n      return or(...constraints);\n    }\n\n    throw new Error('Invalid filter operator');\n  }\n\n  throw new Error('Invaldi filter.');\n}\n"],"mappings":";;AAAA,SACEA,SAAS,EACTC,KAAK,EACLC,KAAK,EACLC,OAAO,EACPC,KAAK,EACLC,WAAW,EACXC,OAAO,EACPC,UAAU,EACVC,KAAK,EACLC,SAAS,EACTC,GAAG,EACHC,EAAE,QACG,+DAA+D;AACtE,SAASC,YAAY,EAAEC,eAAe,QAAQ,WAAW;AAEzD,OAAO,SAASC,UAAUA,CAACC,aAAa,EAAEC,OAAO,EAAEC,MAAM,EAAEC,OAAO,EAAE;EAElE,KAAK,IAAMC,MAAM,IAAIH,OAAO,EAAE;IAC5BD,aAAa,GAAGd,KAAK,CAACc,aAAa,EAAEK,mBAAmB,CAACD,MAAM,CAAC,CAAC;EACnE;EAGA,KAAK,IAAME,KAAK,IAAIJ,MAAM,EAAE;IAC1B,IAAMK,SAAS,GACb,OAAOD,KAAK,CAACC,SAAS,KAAK,QAAQ,GAAGD,KAAK,CAACC,SAAS,GAAAC,UAAA,CAAOvB,SAAS,EAAAwB,kBAAA,CAAIH,KAAK,CAACC,SAAS,EAAC;IAC3F,IAAMG,SAAS,GAAGJ,KAAK,CAACI,SAAS,KAAK,WAAW,GAAG,KAAK,GAAG,MAAM;IAClEV,aAAa,GAAGd,KAAK,CAACc,aAAa,EAAEZ,OAAO,CAACmB,SAAS,EAAEG,SAAS,CAAC,CAAC;EACrE;EAGA,IAAI,OAAO,IAAIP,OAAO,EAAE;IACtBH,aAAa,GAAGd,KAAK,CAACc,aAAa,EAAEX,KAAK,CAACc,OAAO,CAACd,KAAK,CAAC,CAAC;EAC5D;EAEA,IAAI,aAAa,IAAIc,OAAO,EAAE;IAC5BH,aAAa,GAAGd,KAAK,CAACc,aAAa,EAAEV,WAAW,CAACa,OAAO,CAACb,WAAW,CAAC,CAAC;EACxE;EAEA,IAAI,SAAS,IAAIa,OAAO,EAAE;IACxB,IAAMQ,SAAS,GAAGb,eAAe,CAACE,aAAa,CAACY,SAAS,EAAET,OAAO,CAACZ,OAAO,CAAC;IAC3ES,aAAa,GAAGd,KAAK,CAACc,aAAa,EAAET,OAAO,CAAAsB,KAAA,SAAAJ,kBAAA,CAAIE,SAAS,EAAC,CAAC;EAC7D;EAEA,IAAI,YAAY,IAAIR,OAAO,EAAE;IAC3B,IAAMQ,UAAS,GAAGb,eAAe,CAACE,aAAa,CAACY,SAAS,EAAET,OAAO,CAACX,UAAU,CAAC;IAC9EQ,aAAa,GAAGd,KAAK,CAACc,aAAa,EAAER,UAAU,CAAAqB,KAAA,SAAAJ,kBAAA,CAAIE,UAAS,EAAC,CAAC;EAChE;EAEA,IAAI,OAAO,IAAIR,OAAO,EAAE;IACtB,IAAMQ,WAAS,GAAGb,eAAe,CAACE,aAAa,CAACY,SAAS,EAAET,OAAO,CAACV,KAAK,CAAC;IACzEO,aAAa,GAAGd,KAAK,CAACc,aAAa,EAAEP,KAAK,CAAAoB,KAAA,SAAAJ,kBAAA,CAAIE,WAAS,EAAC,CAAC;EAC3D;EAEA,IAAI,WAAW,IAAIR,OAAO,EAAE;IAC1B,IAAMQ,WAAS,GAAGb,eAAe,CAACE,aAAa,CAACY,SAAS,EAAET,OAAO,CAACT,SAAS,CAAC;IAC7EM,aAAa,GAAGd,KAAK,CAACc,aAAa,EAAEN,SAAS,CAAAmB,KAAA,SAAAJ,kBAAA,CAAIE,WAAS,EAAC,CAAC;EAC/D;EAEA,OAAOX,aAAa;AACtB;AAEA,SAASK,mBAAmBA,CAACD,MAAM,EAAE;EACnC,IAAI,WAAW,IAAIA,MAAM,IAAIA,MAAM,CAACG,SAAS,EAAE;IAC7C,IAAMA,SAAS,GAAGO,KAAK,CAACC,OAAO,CAACX,MAAM,CAACG,SAAS,CAAC,GAAAC,UAAA,CACzCvB,SAAS,EAAAwB,kBAAA,CAAIL,MAAM,CAACG,SAAS,KAAAC,UAAA,CAC7BvB,SAAS,EAAAwB,kBAAA,CAAIL,MAAM,CAACG,SAAS,CAACS,SAAS,EAAC;IAChD,IAAMC,QAAQ,GAAGb,MAAM,CAACa,QAAQ;IAChC,IAAMC,KAAK,GAAGrB,YAAY,CAACX,KAAK,CAAC0B,SAAS,EAAER,MAAM,CAACc,KAAK,CAAC;IAEzD,QAAQD,QAAQ;MACd,KAAK,OAAO;QACV,OAAO9B,KAAK,CAACoB,SAAS,EAAE,IAAI,EAAEW,KAAK,CAAC;MACtC,KAAK,WAAW;QACd,OAAO/B,KAAK,CAACoB,SAAS,EAAE,IAAI,EAAEW,KAAK,CAAC;MACtC,KAAK,cAAc;QACjB,OAAO/B,KAAK,CAACoB,SAAS,EAAE,GAAG,EAAEW,KAAK,CAAC;MACrC,KAAK,uBAAuB;QAC1B,OAAO/B,KAAK,CAACoB,SAAS,EAAE,IAAI,EAAEW,KAAK,CAAC;MACtC,KAAK,WAAW;QACd,OAAO/B,KAAK,CAACoB,SAAS,EAAE,GAAG,EAAEW,KAAK,CAAC;MACrC,KAAK,oBAAoB;QACvB,OAAO/B,KAAK,CAACoB,SAAS,EAAE,IAAI,EAAEW,KAAK,CAAC;MACtC,KAAK,gBAAgB;QACnB,OAAO/B,KAAK,CAACoB,SAAS,EAAE,gBAAgB,EAAEW,KAAK,CAAC;MAClD,KAAK,oBAAoB;QACvB,OAAO/B,KAAK,CAACoB,SAAS,EAAE,oBAAoB,EAAEW,KAAK,CAAC;MACtD,KAAK,IAAI;QACP,OAAO/B,KAAK,CAACoB,SAAS,EAAE,IAAI,EAAEW,KAAK,CAAC;MACtC,KAAK,QAAQ;QACX,OAAO/B,KAAK,CAACoB,SAAS,EAAE,QAAQ,EAAEW,KAAK,CAAC;IAC5C;EACF,CAAC,MAAM,IAAI,UAAU,IAAId,MAAM,IAAI,SAAS,IAAIA,MAAM,EAAE;IACtD,IAAMe,WAAW,GAAG,EAAE;IAEtB,KAAK,IAAMC,UAAU,IAAIhB,MAAM,CAACiB,OAAO,EAAE;MACvCF,WAAW,CAACG,IAAI,CAACjB,mBAAmB,CAACe,UAAU,CAAC,CAAC;IACnD;IAEA,IAAIhB,MAAM,CAACa,QAAQ,KAAK,KAAK,EAAE;MAC7B,OAAOtB,GAAG,CAAAkB,KAAA,SAAIM,WAAW,CAAC;IAC5B;IAEA,IAAIf,MAAM,CAACa,QAAQ,KAAK,IAAI,EAAE;MAC5B,OAAOrB,EAAE,CAAAiB,KAAA,SAAIM,WAAW,CAAC;IAC3B;IAEA,MAAM,IAAII,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAEA,MAAM,IAAIA,KAAK,CAAC,iBAAiB,CAAC;AACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}