{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { firebase } from '../index';\nexport function getFirestore(app, databaseId) {\n  if (app) {\n    if (databaseId) {\n      return firebase.app(app.name).firestore(databaseId);\n    } else {\n      return firebase.app(app.name).firestore();\n    }\n  }\n  if (databaseId) {\n    return firebase.app().firestore(databaseId);\n  }\n  return firebase.app().firestore();\n}\nexport function doc(parent, path) {\n  for (var _len = arguments.length, pathSegments = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    pathSegments[_key - 2] = arguments[_key];\n  }\n  if (pathSegments && pathSegments.length) {\n    path = path + '/' + pathSegments.map(function (e) {\n      return e.replace(/^\\/|\\/$/g, '');\n    }).join('/');\n  }\n  return parent.doc(path);\n}\nexport function collection(parent, path) {\n  for (var _len2 = arguments.length, pathSegments = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n    pathSegments[_key2 - 2] = arguments[_key2];\n  }\n  if (pathSegments && pathSegments.length) {\n    path = path + '/' + pathSegments.map(function (e) {\n      return e.replace(/^\\/|\\/$/g, '');\n    }).join('/');\n  }\n  return parent.collection(path);\n}\nexport function collectionGroup(firestore, collectionId) {\n  return firestore.collectionGroup(collectionId);\n}\nexport function setDoc(reference, data, options) {\n  return reference.set(data, options);\n}\nexport function updateDoc(reference, fieldOrUpdateData, value) {\n  for (var _len3 = arguments.length, moreFieldsAndValues = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {\n    moreFieldsAndValues[_key3 - 3] = arguments[_key3];\n  }\n  if (!fieldOrUpdateData) {\n    return reference.update();\n  }\n  if (!value) {\n    return reference.update(fieldOrUpdateData);\n  }\n  if (!moreFieldsAndValues || !Array.isArray(moreFieldsAndValues)) {\n    return reference.update(fieldOrUpdateData, value);\n  }\n  return reference.update.apply(reference, [fieldOrUpdateData, value].concat(moreFieldsAndValues));\n}\nexport function addDoc(reference, data) {\n  return reference.add(data);\n}\nexport function enableNetwork(firestore) {\n  return firestore.enableNetwork();\n}\nexport function disableNetwork(firestore) {\n  return firestore.disableNetwork();\n}\nexport function clearPersistence(firestore) {\n  return firestore.clearPersistence();\n}\nexport function terminate(firestore) {\n  return firestore.terminate();\n}\nexport function waitForPendingWrites(firestore) {\n  return firestore.waitForPendingWrites();\n}\nexport function initializeFirestore(_x, _x2) {\n  return _initializeFirestore.apply(this, arguments);\n}\nfunction _initializeFirestore() {\n  _initializeFirestore = _asyncToGenerator(function* (app, settings) {\n    var firestore = firebase.firestore(app);\n    yield firestore.settings(settings);\n    return firestore;\n  });\n  return _initializeFirestore.apply(this, arguments);\n}\nexport function setLogLevel(logLevel) {\n  return firebase.firestore.setLogLevel(logLevel);\n}\nexport function runTransaction(firestore, updateFunction) {\n  return firestore.runTransaction(updateFunction);\n}\nexport function getCountFromServer(query) {\n  return query.count().get();\n}\nexport function loadBundle(firestore, bundleData) {\n  return firestore.loadBundle(bundleData);\n}\nexport function namedQuery(firestore, name) {\n  return firestore.namedQuery(name);\n}\nexport function writeBatch(firestore) {\n  return firestore.batch();\n}\nexport function getPersistentCacheIndexManager(firestore) {\n  return firestore.persistentCacheIndexManager();\n}\nexport function enablePersistentCacheIndexAutoCreation(indexManager) {\n  return indexManager.enableIndexAutoCreation();\n}\nexport function disablePersistentCacheIndexAutoCreation(indexManager) {\n  return indexManager.disableIndexAutoCreation();\n}\nexport function deleteAllPersistentCacheIndexes(indexManager) {\n  return indexManager.deleteAllIndexes();\n}\nexport * from './query';\nexport * from './snapshot';\nexport * from './Bytes';\nexport * from './FieldPath';\nexport * from './FieldValue';\nexport * from './GeoPoint';\nexport * from './Timestamp';\nexport { Filter } from '../FirestoreFilter';","map":{"version":3,"names":["firebase","getFirestore","app","databaseId","name","firestore","doc","parent","path","_len","arguments","length","pathSegments","Array","_key","map","e","replace","join","collection","_len2","_key2","collectionGroup","collectionId","setDoc","reference","data","options","set","updateDoc","fieldOrUpdateData","value","_len3","moreFieldsAndValues","_key3","update","isArray","apply","concat","addDoc","add","enableNetwork","disableNetwork","clearPersistence","terminate","waitForPendingWrites","initializeFirestore","_x","_x2","_initializeFirestore","_asyncToGenerator","settings","setLogLevel","logLevel","runTransaction","updateFunction","getCountFromServer","query","count","get","loadBundle","bundleData","namedQuery","writeBatch","batch","getPersistentCacheIndexManager","persistentCacheIndexManager","enablePersistentCacheIndexAutoCreation","indexManager","enableIndexAutoCreation","disablePersistentCacheIndexAutoCreation","disableIndexAutoCreation","deleteAllPersistentCacheIndexes","deleteAllIndexes","Filter"],"sources":["C:/Users/richard.5935/Downloads/Yzon/node_modules/@react-native-firebase/firestore/lib/modular/index.js"],"sourcesContent":["/**\n * @typedef {import('..').FirebaseFirestoreTypes} FirebaseFirestoreTypes\n * @typedef {import('..').FirebaseFirestoreTypes.CollectionReference} CollectionReference\n * @typedef {import('..').FirebaseFirestoreTypes.DocumentData} DocumentData\n * @typedef {import('..').FirebaseFirestoreTypes.DocumentReference} DocumentReference\n * @typedef {import('..').FirebaseFirestoreTypes.FieldPath} FieldPath\n * @typedef {import('..').FirebaseFirestoreTypes.Module} Firestore\n * @typedef {import('..').FirebaseFirestoreTypes.Query} Query\n * @typedef {import('..').FirebaseFirestoreTypes.SetOptions} SetOptions\n * @typedef {import('..').FirebaseFirestoreTypes.Settings} FirestoreSettings\n * @typedef {import('..').FirebaseFirestoreTypes.PersistentCacheIndexManager} PersistentCacheIndexManager\n * @typedef {import('@firebase/app').FirebaseApp} FirebaseApp\n */\n\nimport { firebase } from '../index';\n\n/**\n * @param {FirebaseApp?} app\n * @param {String?} databaseId\n * @returns {Firestore}\n */\nexport function getFirestore(app, databaseId) {\n  if (app) {\n    if (databaseId) {\n      return firebase.app(app.name).firestore(databaseId);\n    } else {\n      return firebase.app(app.name).firestore();\n    }\n  }\n  if (databaseId) {\n    return firebase.app().firestore(databaseId);\n  }\n\n  return firebase.app().firestore();\n}\n\n/**\n * @param {Firestore | CollectionReference | DocumentReference<unknown>} parent\n * @param {string?} path\n * @param {string?} pathSegments\n * @returns {DocumentReference}\n */\nexport function doc(parent, path, ...pathSegments) {\n  if (pathSegments && pathSegments.length) {\n    path = path + '/' + pathSegments.map(e => e.replace(/^\\/|\\/$/g, '')).join('/');\n  }\n\n  return parent.doc(path);\n}\n\n/**\n * @param {Firestore | DocumentReference<unknown> | CollectionReference<unknown>} parent\n * @param {string} path\n * @param {string?} pathSegments\n * @returns {CollectionReference<DocumentData>}\n */\nexport function collection(parent, path, ...pathSegments) {\n  if (pathSegments && pathSegments.length) {\n    path = path + '/' + pathSegments.map(e => e.replace(/^\\/|\\/$/g, '')).join('/');\n  }\n\n  return parent.collection(path);\n}\n\n/**\n * @param {Firestore} firestore\n * @param {string} collectionId\n * @returns {Query<DocumentData>}\n */\nexport function collectionGroup(firestore, collectionId) {\n  return firestore.collectionGroup(collectionId);\n}\n\n/**\n * @param {DocumentReference} reference\n * @param {import('.').PartialWithFieldValue} data\n * @param {SetOptions?} options\n * @returns {Promise<void>}\n */\nexport function setDoc(reference, data, options) {\n  return reference.set(data, options);\n}\n\n/**\n * @param {DocumentReference} reference\n * @param {string | FieldPath | import('.').UpdateData} fieldOrUpdateData\n * @param {unknown?} value\n * @param {unknown} moreFieldsAndValues\n * @returns {Promise<void>}\n */\nexport function updateDoc(reference, fieldOrUpdateData, value, ...moreFieldsAndValues) {\n  if (!fieldOrUpdateData) {\n    // @ts-ignore\n    return reference.update();\n  }\n\n  if (!value) {\n    return reference.update(fieldOrUpdateData);\n  }\n\n  if (!moreFieldsAndValues || !Array.isArray(moreFieldsAndValues)) {\n    return reference.update(fieldOrUpdateData, value);\n  }\n\n  return reference.update(fieldOrUpdateData, value, ...moreFieldsAndValues);\n}\n\n/**\n * @param {CollectionReference} reference\n * @param {WithFieldValue} data\n * @returns {Promise<DocumentReference>}\n */\nexport function addDoc(reference, data) {\n  return reference.add(data);\n}\n\n/**\n * @param {Firestore} firestore\n * @returns {Promise<void>}\n */\nexport function enableNetwork(firestore) {\n  return firestore.enableNetwork();\n}\n\n/**\n * @param {Firestore} firestore\n * @returns {Promise<void>}\n */\nexport function disableNetwork(firestore) {\n  return firestore.disableNetwork();\n}\n\n/**\n * @param {Firestore} firestore\n * @returns {Promise<void>}\n */\nexport function clearPersistence(firestore) {\n  return firestore.clearPersistence();\n}\n\n/**\n * @param {Firestore} firestore\n * @returns {Promise<void>}\n */\nexport function terminate(firestore) {\n  return firestore.terminate();\n}\n\n/**\n * @param {Firestore} firestore\n * @returns {Promise<void>}\n */\nexport function waitForPendingWrites(firestore) {\n  return firestore.waitForPendingWrites();\n}\n\n/**\n * @param {FirebaseApp} app\n * @param {FirestoreSettings} settings\n * @param {string?} databaseId\n * @returns {Promise<Firestore>}\n */\nexport async function initializeFirestore(app, settings /* databaseId */) {\n  // TODO(exaby73): implement 2nd database once it's supported\n  const firestore = firebase.firestore(app);\n  await firestore.settings(settings);\n  return firestore;\n}\n\n/**\n * @param {import('./').LogLevel} logLevel\n * @returns {void}\n */\nexport function setLogLevel(logLevel) {\n  return firebase.firestore.setLogLevel(logLevel);\n}\n\n/**\n * @param {Firestore} firestore\n * @param {(transaction: FirebaseFirestoreTypes.Transaction) => Promise} updateFunction\n * @returns {Promise}\n */\nexport function runTransaction(firestore, updateFunction) {\n  return firestore.runTransaction(updateFunction);\n}\n\n/**\n * @param {Query} query\n * @returns {Promise<FirebaseFirestoreTypes.AggregateQuerySnapshot>}\n */\nexport function getCountFromServer(query) {\n  return query.count().get();\n}\n\n/**\n * @param {Firestore} firestore\n * @param {ReadableStream<Uint8Array> | ArrayBuffer | string} bundleData\n * @returns {import('.').LoadBundleTask}\n */\nexport function loadBundle(firestore, bundleData) {\n  return firestore.loadBundle(bundleData);\n}\n\n/**\n * @param {Firestore} firestore\n * @param {string} name\n * @returns {Query<DocumentData>}\n */\nexport function namedQuery(firestore, name) {\n  return firestore.namedQuery(name);\n}\n\n/**\n * @param {Firestore} firestore\n * @returns {FirebaseFirestoreTypes.WriteBatch}\n */\nexport function writeBatch(firestore) {\n  return firestore.batch();\n}\n\n/**\n * Gets the `PersistentCacheIndexManager` instance used by this Cloud Firestore instance.\n * This is not the same as Cloud Firestore Indexes.\n * Persistent cache indexes are optional indexes that only exist within the SDK to assist in local query execution.\n * Returns `null` if local persistent storage is not in use.\n * @param {Firestore} firestore\n * @returns {PersistentCacheIndexManager | null}\n */\nexport function getPersistentCacheIndexManager(firestore) {\n  return firestore.persistentCacheIndexManager();\n}\n\n/**\n * Enables the SDK to create persistent cache indexes automatically for local query\n * execution when the SDK believes cache indexes can help improves performance.\n * This feature is disabled by default.\n * @param {PersistentCacheIndexManager} indexManager\n * @returns {Promise<void}\n */\nexport function enablePersistentCacheIndexAutoCreation(indexManager) {\n  return indexManager.enableIndexAutoCreation();\n}\n\n/**\n * Stops creating persistent cache indexes automatically for local query execution.\n * The indexes which have been created by calling `enableIndexAutoCreation()` still take effect.\n * @param {PersistentCacheIndexManager} indexManager\n * @returns {Promise<void}\n */\nexport function disablePersistentCacheIndexAutoCreation(indexManager) {\n  return indexManager.disableIndexAutoCreation();\n}\n\n/**\n * Removes all persistent cache indexes. Note this function also deletes indexes\n * generated by `setIndexConfiguration()`, which is deprecated.\n * @param {PersistentCacheIndexManager} indexManager\n * @returns {Promise<void}\n */\nexport function deleteAllPersistentCacheIndexes(indexManager) {\n  return indexManager.deleteAllIndexes();\n}\n\nexport * from './query';\nexport * from './snapshot';\nexport * from './Bytes';\nexport * from './FieldPath';\nexport * from './FieldValue';\nexport * from './GeoPoint';\nexport * from './Timestamp';\nexport { Filter } from '../FirestoreFilter';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}